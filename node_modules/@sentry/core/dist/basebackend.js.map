{"version":3,"file":"basebackend.js","sourceRoot":"","sources":["../src/basebackend.ts"],"names":[],"mappings":";;;AAEA,+CAA8C;AAC9C,iCAAsC;AAEtC,iDAAgD;AAOhD;;GAEG;AACH;IAIE,8CAA8C;IAC9C,qBAAmB,OAAU;QAU7B,4CAA4C;QACzB,WAAM,GAAkC,IAAI,6BAAa,EAAE,CAAC;QAV7E,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;YACrB,eAAM,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;SAC/D;IACH,CAAC;IAQD;;OAEG;IACU,wCAAkB,GAA/B,UAAgC,UAAe,EAAE,KAAuB;;;gBACtE,MAAM,IAAI,mBAAW,CAAC,sDAAsD,CAAC,CAAC;;;KAC/E;IAED;;OAEG;IACU,sCAAgB,GAA7B,UAA8B,QAAgB,EAAE,MAAiB,EAAE,KAAuB;;;gBACxF,MAAM,IAAI,mBAAW,CAAC,oDAAoD,CAAC,CAAC;;;KAC7E;IAED;;OAEG;IACU,+BAAS,GAAtB,UAAuB,MAAmB;;;gBACxC,MAAM,IAAI,mBAAW,CAAC,6CAA6C,CAAC,CAAC;;;KACtE;IAED;;OAEG;IACI,qCAAe,GAAtB,UAAuB,CAAa;QAClC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACI,gCAAU,GAAjB,UAAkB,CAAQ;QACxB,OAAO;IACT,CAAC;IAED;;OAEG;IACI,+BAAS,GAAhB;QACE,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IACH,kBAAC;AAAD,CAAC,AA3DD,IA2DC;AA3DqB,kCAAW","sourcesContent":["import { Scope } from '@sentry/hub';\nimport { Breadcrumb, SentryEvent, SentryEventHint, SentryResponse, Severity, Transport } from '@sentry/types';\nimport { logger } from '@sentry/utils/logger';\nimport { SentryError } from './error';\nimport { Backend, Options } from './interfaces';\nimport { RequestBuffer } from './requestbuffer';\n\n/** A class object that can instanciate Backend objects. */\nexport interface BackendClass<B extends Backend, O extends Options> {\n  new (options: O): B;\n}\n\n/**\n * This is the base implemention of a Backend.\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly options: O;\n\n  /** Creates a new browser backend instance. */\n  public constructor(options: O) {\n    this.options = options;\n    if (!this.options.dsn) {\n      logger.warn('No DSN provided, backend will not do anything.');\n    }\n  }\n\n  /** Cached transport used internally. */\n  protected transport?: Transport;\n\n  /** A simple buffer holding all requests. */\n  protected readonly buffer: RequestBuffer<SentryResponse> = new RequestBuffer();\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromException(_exception: any, _hint?: SentryEventHint): Promise<SentryEvent> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromMessage(_message: string, _level?: Severity, _hint?: SentryEventHint): Promise<SentryEvent> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async sendEvent(_event: SentryEvent): Promise<SentryResponse> {\n    throw new SentryError('Backend has to implement `sendEvent` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public storeBreadcrumb(_: Breadcrumb): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public storeScope(_: Scope): void {\n    // Noop\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getBuffer(): RequestBuffer<SentryResponse> {\n    return this.buffer;\n  }\n}\n"]}