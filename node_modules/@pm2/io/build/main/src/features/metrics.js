"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const meter_1 = require("../utils/metrics/meter");
const counter_1 = require("../utils/metrics/counter");
const histogram_1 = require("../utils/metrics/histogram");
const serviceManager_1 = require("../serviceManager");
const constants_1 = require("../constants");
const metrics_1 = require("../services/metrics");
class MetricsFeature {
    constructor() {
        this._var = new Map();
        this.defaultAggregation = 'avg';
        this._started = false;
        this._alreadySentData = [];
        this.AVAILABLE_MEASUREMENTS = [
            'min',
            'max',
            'sum',
            'count',
            'variance',
            'mean',
            'stddev',
            'median',
            'p75',
            'p95',
            'p99',
            'p999'
        ];
        this._var = serviceManager_1.ServiceManager.get('metricsMap');
        serviceManager_1.ServiceManager.set('metricService', new metrics_1.default(this));
        this.metricService = serviceManager_1.ServiceManager.get('metricService');
    }
    init(config, force) {
        if (this._started === false) {
            this._started = true;
            const self = this;
            this.timer = setInterval(function () {
                const data = self._cookData(self._getVar());
                // don't send empty data
                if (Object.keys(data).length !== 0 && serviceManager_1.ServiceManager.get('transport')) {
                    serviceManager_1.ServiceManager.get('transport').setMetrics(data);
                }
            }, constants_1.default.METRIC_INTERVAL);
            this.timer.unref();
        }
        this.metricService.init(config, force);
        return {
            histogram: this.histogram,
            meter: this.meter,
            counter: this.counter,
            metric: this.metric
        };
    }
    transpose(variableName, reporter) {
        if (typeof variableName === 'object') {
            reporter = variableName.data;
            variableName = variableName.name;
        }
        if (typeof reporter !== 'function') {
            console.error('[PM2 IO][Transpose] reporter is not a function');
            return undefined;
        }
        this._var.set(variableName, {
            value: reporter
        });
    }
    meter(opts) {
        if (!opts.name) {
            console.error('[PM2 IO][Meter] Name not defined');
            return undefined;
        }
        opts.unit = opts.unit || '';
        const meter = new meter_1.default(opts);
        this._var.set(opts.name, {
            value: function () {
                return meter.val() + `${opts.unit}`;
            },
            type: opts.type || opts.name,
            historic: this._historicEnabled(opts.historic),
            agg_type: opts.agg_type || this.defaultAggregation,
            unit: opts.unit
        });
        return meter;
    }
    counter(opts) {
        if (!opts.name) {
            console.error('[PM2 IO][Counter] Name not defined');
            return undefined;
        }
        const counter = new counter_1.default(opts);
        this._var.set(opts.name, {
            value: function () { return counter.val(); },
            type: opts.type || opts.name,
            historic: this._historicEnabled(opts.historic),
            agg_type: opts.agg_type || this.defaultAggregation,
            unit: opts.unit
        });
        return counter;
    }
    histogram(opts) {
        if (!opts.name) {
            console.error('[PM2 IO][Histogram] Name not defined');
            return undefined;
        }
        opts.measurement = opts.measurement || 'mean';
        opts.unit = opts.unit || '';
        if (this.AVAILABLE_MEASUREMENTS.indexOf(opts.measurement) === -1) {
            console.error('[PM2 IO][Histogram] Measure type %s does not exists', opts.measurement);
            return undefined;
        }
        const histogram = new histogram_1.default(opts);
        this._var.set(opts.name, {
            value: function () {
                return (Math.round(histogram.val() * 100) / 100) + `${opts.unit}`;
            },
            type: opts.type || opts.name,
            historic: this._historicEnabled(opts.historic),
            agg_type: opts.agg_type || this.defaultAggregation,
            unit: opts.unit
        });
        return histogram;
    }
    metric(opts) {
        if (!opts.name) {
            console.error('[PM2 IO][Metric] Name not defined');
            return undefined;
        }
        this._var.set(opts.name, {
            value: opts.value || 0,
            type: opts.type || opts.name,
            historic: this._historicEnabled(opts.historic),
            agg_type: opts.agg_type || this.defaultAggregation,
            unit: opts.unit
        });
        const self = this;
        return {
            val: function () {
                let value = self._var.get(opts.name).value;
                if (typeof (value) === 'function') {
                    value = value();
                }
                return value;
            },
            set: function (dt) {
                if (self._var.get(opts.name))
                    self._var.get(opts.name).value = dt;
            }
        };
    }
    deleteMetric(name) {
        this._var.delete(name);
        this._alreadySentData.splice(this._alreadySentData.indexOf(name), 1);
    }
    destroy() {
        clearInterval(this.timer);
        this._getVar().clear();
        this._started = false;
        this.metricService.destroyAll();
    }
    /** -----------------------------------------
     * Private Methods
     * ------------------------------------------
     */
    /**
     * Check if metric is historic or not
     *
     * @param historic
     * @returns {boolean}
     * @private
     */
    _historicEnabled(historic) {
        if (historic === false) {
            return false;
        }
        if (typeof (historic) === 'undefined') {
            return true;
        }
        return true;
    }
    /**
     * Only for tests
     *
     * @returns {Object}
     */
    _getVar() {
        return this._var;
    }
    /**
     * Data that will be sent to Keymetrics
     */
    _cookData(data) {
        const cookedData = {};
        const self = this;
        data.forEach(function (probe, probeName) {
            if (typeof (data.get(probeName).value) === 'undefined') {
                return false;
            }
            const value = self._getValue(data.get(probeName).value);
            // do not send data if this is always equal to 0
            // probably an initialized metric which is not "active"
            if ((self._alreadySentData.indexOf(probeName) === -1 && value !== 0) ||
                self._alreadySentData.indexOf(probeName) > -1) {
                if (self._alreadySentData.indexOf(probeName) === -1) {
                    self._alreadySentData.push(probeName);
                }
                cookedData[probeName] = {
                    value: value
                };
                /**
                 * Attach aggregation mode
                 */
                if (data.get(probeName).agg_type &&
                    data.get(probeName).agg_type !== 'none') {
                    cookedData[probeName].agg_type = data.get(probeName).agg_type;
                }
                cookedData[probeName].historic = data.get(probeName).historic;
                cookedData[probeName].type = data.get(probeName).type;
                cookedData[probeName].unit = data.get(probeName).unit;
            }
        });
        return cookedData;
    }
    _getValue(value) {
        if (typeof (value) === 'function') {
            return value();
        }
        return value;
    }
}
exports.default = MetricsFeature;
//# sourceMappingURL=data:application/json;base64,