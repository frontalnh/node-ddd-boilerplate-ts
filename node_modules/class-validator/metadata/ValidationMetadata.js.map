{"version":3,"sources":["../../src/metadata/ValidationMetadata.ts"],"names":[],"mappings":";;AAGA;;GAEG;AACH;IA6DI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,4BAAY,IAA4B;QA7BxC;;WAEG;QACH,WAAM,GAAa,EAAE,CAAC;QAEtB;;WAEG;QACH,WAAM,GAAY,KAAK,CAAC;QAExB;;WAEG;QACH,SAAI,GAAY,KAAK,CAAC;QAEtB;;WAEG;QACH,YAAO,GAAS,SAAS,CAAC;QAYtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACtC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACxC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC;QACxD,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;YAC9C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;YAC5C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;YAC5C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;YACxC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;SACjD;IACL,CAAC;IAEL,yBAAC;AAAD,CAjFA,AAiFC,IAAA;AAjFY,gDAAkB","file":"ValidationMetadata.js","sourcesContent":["import {ValidationMetadataArgs} from \"./ValidationMetadataArgs\";\r\nimport {ValidationArguments} from \"../validation/ValidationArguments\";\r\n\r\n/**\r\n * This metadata contains validation rules.\r\n */\r\nexport class ValidationMetadata {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Validation type.\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * Target class to which this validation is applied.\r\n     */\r\n    target: Function|string;\r\n\r\n    /**\r\n     * Property of the object to be validated.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * Constraint class that performs validation. Used only for custom validations.\r\n     */\r\n    constraintCls: Function;\r\n\r\n    /**\r\n     * Array of constraints of this validation.\r\n     */\r\n    constraints: any[];\r\n\r\n    /**\r\n     * Validation message to be shown in the case of error.\r\n     */\r\n    message: string|((args: ValidationArguments) => string);\r\n\r\n    /**\r\n     * Validation groups used for this validation.\r\n     */\r\n    groups: string[] = [];\r\n\r\n    /**\r\n     * Indicates if validation must be performed always, no matter of validation groups used.\r\n     */\r\n    always: boolean = false;\r\n\r\n    /**\r\n     * Specifies if validated value is an array and each of its item must be validated.\r\n     */\r\n    each: boolean = false;\r\n\r\n    /*\r\n     * A transient set of data passed through to the validation result for response mapping\r\n     */\r\n    context?: any = undefined;\r\n\r\n    /**\r\n     * Extra options specific to validation type.\r\n     */\r\n    validationTypeOptions: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(args: ValidationMetadataArgs) {\r\n        this.type = args.type;\r\n        this.target = args.target;\r\n        this.propertyName = args.propertyName;\r\n        this.constraints = args.constraints;\r\n        this.constraintCls = args.constraintCls;\r\n        this.validationTypeOptions = args.validationTypeOptions;\r\n        if (args.validationOptions) {\r\n            this.message = args.validationOptions.message;\r\n            this.groups = args.validationOptions.groups;\r\n            this.always = args.validationOptions.always;\r\n            this.each = args.validationOptions.each;\r\n            this.context = args.validationOptions.context;\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}