"use strict";
/*
 * Special thanks for @pleerock for parts of this code :)
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Container to be used by this library for inversion control.
 * If container was not implicitly set then by default
 * container simply creates a new instance of the given class.
 */
class DefaultContainer {
    constructor() {
        this.instances = [];
    }
    get(someClass) {
        let instance = this.instances.find(it => it.type === someClass);
        if (!instance) {
            instance = { type: someClass, object: new someClass() };
            this.instances.push(instance);
        }
        return instance.object;
    }
}
class IOCContainer {
    /**
     * Sets the container to the basic, default one.
     * Used mainly for testing purposes.
     */
    static restoreDefault() {
        this.userContainer = undefined;
        this.userContainerGetter = undefined;
        this.userContainerOptions = {};
        this.defaultContainer = new DefaultContainer();
    }
    /**
     * Sets container to be used by this library.
     */
    static useContainer(iocContainer, options = {}) {
        this.userContainer = iocContainer;
        this.userContainerGetter = undefined;
        this.userContainerOptions = options;
    }
    /**
     * Sets container getter function to be used by this library.
     */
    static useContainerGetter(containerGetter, options = {}) {
        this.userContainer = undefined;
        this.userContainerGetter = containerGetter;
        this.userContainerOptions = options;
    }
    /**
     * Gets the class instance from IOC container used by this library.
     */
    static getInstance(someClass, resolverData) {
        const container = this.userContainerGetter
            ? this.userContainerGetter(resolverData)
            : this.userContainer;
        if (container) {
            try {
                const instance = container.get(someClass, resolverData);
                if (instance) {
                    return instance;
                }
                if (!this.userContainerOptions || !this.userContainerOptions.fallback) {
                    return instance;
                }
            }
            catch (error) {
                if (!this.userContainerOptions || !this.userContainerOptions.fallbackOnErrors) {
                    throw error;
                }
            }
        }
        return this.defaultContainer.get(someClass);
    }
}
IOCContainer.defaultContainer = new DefaultContainer();
exports.IOCContainer = IOCContainer;
function useContainer(iocContainerOrGetFromResolverData, options) {
    if ("get" in iocContainerOrGetFromResolverData &&
        typeof iocContainerOrGetFromResolverData.get === "function") {
        IOCContainer.useContainer(iocContainerOrGetFromResolverData, options);
    }
    else if (typeof iocContainerOrGetFromResolverData === "function") {
        IOCContainer.useContainerGetter(iocContainerOrGetFromResolverData, options);
    }
}
exports.useContainer = useContainer;
