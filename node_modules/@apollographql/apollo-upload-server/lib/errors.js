"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileStreamDisconnectUploadError = exports.UploadPromiseDisconnectUploadError = exports.FileMissingUploadError = exports.FilesBeforeMapUploadError = exports.MapBeforeOperationsUploadError = exports.MaxFilesUploadError = exports.MaxFileSizeUploadError = exports.UploadError = exports.SPEC_URL = void 0;
const SPEC_URL = 'https://github.com/jaydenseric/graphql-multipart-request-spec';
exports.SPEC_URL = SPEC_URL;

class UploadError extends Error {
  constructor(message, status) {
    super(message);
    this.name = this.constructor.name;
    if (typeof Error.captureStackTrace === 'function') Error.captureStackTrace(this, this.constructor);else this.stack = new Error(message).stack;

    if (status) {
      this.status = status;
      this.expose = true;
    }
  }

}

exports.UploadError = UploadError;

class MaxFileSizeUploadError extends UploadError {}

exports.MaxFileSizeUploadError = MaxFileSizeUploadError;

class MaxFilesUploadError extends UploadError {}

exports.MaxFilesUploadError = MaxFilesUploadError;

class MapBeforeOperationsUploadError extends UploadError {}

exports.MapBeforeOperationsUploadError = MapBeforeOperationsUploadError;

class FilesBeforeMapUploadError extends UploadError {}

exports.FilesBeforeMapUploadError = FilesBeforeMapUploadError;

class FileMissingUploadError extends UploadError {}

exports.FileMissingUploadError = FileMissingUploadError;

class UploadPromiseDisconnectUploadError extends UploadError {}

exports.UploadPromiseDisconnectUploadError = UploadPromiseDisconnectUploadError;

class FileStreamDisconnectUploadError extends UploadError {}

exports.FileStreamDisconnectUploadError = FileStreamDisconnectUploadError;