{"version":3,"sources":["../../src/validation/Validator.ts"],"names":[],"mappings":"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","file":"Validator.js","sourcesContent":["import {ValidationMetadata} from \"../metadata/ValidationMetadata\";\r\nimport {ValidationTypes} from \"./ValidationTypes\";\r\nimport {ValidationError} from \"./ValidationError\";\r\nimport {IsEmailOptions, IsFQDNOptions, IsURLOptions, IsCurrencyOptions, IsNumberOptions} from \"./ValidationTypeOptions\";\r\nimport {ValidatorOptions} from \"./ValidatorOptions\";\r\nimport {ValidationExecutor} from \"./ValidationExecutor\";\r\nimport {ValidationOptions} from \"../decorator/ValidationOptions\";\r\n\r\n/**\r\n * Validator performs validation of the given object based on its metadata.\r\n */\r\nexport class Validator {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    private validatorJs = require(\"validator\");\r\n    private libPhoneNumber = {\r\n        phoneUtil: require(\"google-libphonenumber\").PhoneNumberUtil.getInstance(),\r\n    };\r\n\r\n    /**\r\n     * Performs validation of the given object based on decorators or validation schema.\r\n     * Common method for `validateOrReject` and `validate` methods.\r\n     */\r\n    private coreValidate(objectOrSchemaName: Object|string, objectOrValidationOptions: Object|ValidationOptions, maybeValidatorOptions?: ValidatorOptions): Promise<ValidationError[]> {\r\n        const object = typeof objectOrSchemaName === \"string\" ? objectOrValidationOptions as Object : objectOrSchemaName as Object;\r\n        const options = typeof objectOrSchemaName === \"string\" ? maybeValidatorOptions : objectOrValidationOptions as ValidationOptions;\r\n        const schema = typeof objectOrSchemaName === \"string\" ? objectOrSchemaName as string : undefined;\r\n\r\n        const executor = new ValidationExecutor(this, options);\r\n        const validationErrors: ValidationError[] = [];\r\n        executor.execute(object, schema, validationErrors);\r\n\r\n        return Promise.all(executor.awaitingPromises).then(() => {\r\n            return executor.stripEmptyErrors(validationErrors);\r\n        });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs validation of the given object based on decorators used in given object class.\r\n     */\r\n    validate(object: Object, options?: ValidatorOptions): Promise<ValidationError[]>;\r\n\r\n    /**\r\n     * Performs validation of the given object based on validation schema.\r\n     */\r\n    validate(schemaName: string, object: Object, options?: ValidatorOptions): Promise<ValidationError[]>;\r\n\r\n    /**\r\n     * Performs validation of the given object based on decorators or validation schema.\r\n     */\r\n    validate(objectOrSchemaName: Object|string, objectOrValidationOptions: Object|ValidationOptions, maybeValidatorOptions?: ValidatorOptions): Promise<ValidationError[]> {\r\n        return this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\r\n    }\r\n\r\n    /**\r\n     * Performs validation of the given object based on decorators used in given object class and reject on error.\r\n     */\r\n    validateOrReject(object: Object, options?: ValidatorOptions): Promise<void>;\r\n\r\n    /**\r\n     * Performs validation of the given object based on validation schema and reject on error.\r\n     */\r\n    validateOrReject(schemaName: string, object: Object, options?: ValidatorOptions): Promise<void>;\r\n\r\n    /**\r\n     * Performs validation of the given object based on decorators or validation schema and reject on error.\r\n     */\r\n    async validateOrReject(objectOrSchemaName: Object|string, objectOrValidationOptions: Object|ValidationOptions, maybeValidatorOptions?: ValidatorOptions): Promise<void> {\r\n        const errors = await this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\r\n        if (errors.length)\r\n            return Promise.reject(errors);\r\n    }\r\n\r\n    /**\r\n     * Performs validation of the given object based on decorators used in given object class.\r\n     * NOTE: This method completely ignores all async validations.\r\n     */\r\n    validateSync(object: Object, options?: ValidatorOptions): ValidationError[];\r\n\r\n    /**\r\n     * Performs validation of the given object based on validation schema.\r\n     */\r\n    validateSync(schemaName: string, object: Object, options?: ValidatorOptions): ValidationError[];\r\n\r\n    /**\r\n     * Performs validation of the given object based on decorators or validation schema.\r\n     */\r\n    validateSync(objectOrSchemaName: Object|string, objectOrValidationOptions: Object|ValidationOptions, maybeValidatorOptions?: ValidatorOptions): ValidationError[] {\r\n        const object = typeof objectOrSchemaName === \"string\" ? objectOrValidationOptions as Object : objectOrSchemaName as Object;\r\n        const options = typeof objectOrSchemaName === \"string\" ? maybeValidatorOptions : objectOrValidationOptions as ValidationOptions;\r\n        const schema = typeof objectOrSchemaName === \"string\" ? objectOrSchemaName as string : undefined;\r\n\r\n        const executor = new ValidationExecutor(this, options);\r\n        executor.ignoreAsyncValidations = true;\r\n        const validationErrors: ValidationError[] = [];\r\n        executor.execute(object, schema, validationErrors);\r\n        return executor.stripEmptyErrors(validationErrors);\r\n    }\r\n\r\n    /**\r\n     * Performs validation of the given object based on the given ValidationMetadata object.\r\n     */\r\n    validateValueByMetadata(value: any, metadata: ValidationMetadata): boolean {\r\n        switch (metadata.type) {\r\n            /* common checkers */\r\n            case ValidationTypes.IS_DEFINED:\r\n                return this.isDefined(value);\r\n            case ValidationTypes.EQUALS:\r\n                return this.equals(value, metadata.constraints[0]);\r\n            case ValidationTypes.NOT_EQUALS:\r\n                return this.notEquals(value, metadata.constraints[0]);\r\n            case ValidationTypes.IS_EMPTY:\r\n                return this.isEmpty(value);\r\n            case ValidationTypes.IS_NOT_EMPTY:\r\n                return this.isNotEmpty(value);\r\n            case ValidationTypes.IS_IN:\r\n                return this.isIn(value, metadata.constraints[0]);\r\n            case ValidationTypes.IS_NOT_IN:\r\n                return this.isNotIn(value, metadata.constraints[0]);\r\n\r\n            /* type checkers */\r\n            case ValidationTypes.IS_BOOLEAN:\r\n                return this.isBoolean(value);\r\n            case ValidationTypes.IS_DATE:\r\n                return this.isDate(value);\r\n            case ValidationTypes.IS_STRING:\r\n                return this.isString(value);\r\n            case ValidationTypes.IS_DATE_STRING:\r\n                return this.isDateString(value);\r\n            case ValidationTypes.IS_ARRAY:\r\n                return this.isArray(value);\r\n            case ValidationTypes.IS_NUMBER:\r\n                return this.isNumber(value, metadata.constraints[0]);\r\n            case ValidationTypes.IS_INT:\r\n                return this.isInt(value);\r\n            case ValidationTypes.IS_ENUM:\r\n                return this.isEnum(value, metadata.constraints[0]);\r\n\r\n            /* number checkers */\r\n            case ValidationTypes.IS_DIVISIBLE_BY:\r\n                return this.isDivisibleBy(value, metadata.constraints[0]);\r\n            case ValidationTypes.IS_POSITIVE:\r\n                return this.isPositive(value);\r\n            case ValidationTypes.IS_NEGATIVE:\r\n                return this.isNegative(value);\r\n            case ValidationTypes.MIN:\r\n                return this.min(value, metadata.constraints[0]);\r\n            case ValidationTypes.MAX:\r\n                return this.max(value, metadata.constraints[0]);\r\n\r\n            /* date checkers */\r\n            case ValidationTypes.MIN_DATE:\r\n                return this.minDate(value, metadata.constraints[0]);\r\n            case ValidationTypes.MAX_DATE:\r\n                return this.maxDate(value, metadata.constraints[0]);\r\n\r\n            /* string-as-type checkers */\r\n            case ValidationTypes.IS_BOOLEAN_STRING:\r\n                return this.isBooleanString(value);\r\n            case ValidationTypes.IS_NUMBER_STRING:\r\n                return this.isNumberString(value);\r\n\r\n            /* string checkers */\r\n            case ValidationTypes.CONTAINS:\r\n                return this.contains(value, metadata.constraints[0]);\r\n            case ValidationTypes.NOT_CONTAINS:\r\n                return this.notContains(value, metadata.constraints[0]);\r\n            case ValidationTypes.IS_ALPHA:\r\n                return this.isAlpha(value);\r\n            case ValidationTypes.IS_ALPHANUMERIC:\r\n                return this.isAlphanumeric(value);\r\n            case ValidationTypes.IS_ASCII:\r\n                return this.isAscii(value);\r\n            case ValidationTypes.IS_BASE64:\r\n                return this.isBase64(value);\r\n            case ValidationTypes.IS_BYTE_LENGTH:\r\n                return this.isByteLength(value, metadata.constraints[0], metadata.constraints[1]);\r\n            case ValidationTypes.IS_CREDIT_CARD:\r\n                return this.isCreditCard(value);\r\n            case ValidationTypes.IS_CURRENCY:\r\n                return this.isCurrency(value, metadata.constraints[0]);\r\n            case ValidationTypes.IS_EMAIL:\r\n                return this.isEmail(value, metadata.constraints[0]);\r\n            case ValidationTypes.IS_FQDN:\r\n                return this.isFQDN(value, metadata.constraints[0]);\r\n            case ValidationTypes.IS_FULL_WIDTH:\r\n                return this.isFullWidth(value);\r\n            case ValidationTypes.IS_HALF_WIDTH:\r\n                return this.isHalfWidth(value);\r\n            case ValidationTypes.IS_VARIABLE_WIDTH:\r\n                return this.isVariableWidth(value);\r\n            case ValidationTypes.IS_HEX_COLOR:\r\n                return this.isHexColor(value);\r\n            case ValidationTypes.IS_HEXADECIMAL:\r\n                return this.isHexadecimal(value);\r\n            case ValidationTypes.IS_IP:\r\n                return this.isIP(value, metadata.constraints[0]);\r\n            case ValidationTypes.IS_ISBN:\r\n                return this.isISBN(value, metadata.constraints[0]);\r\n            case ValidationTypes.IS_ISIN:\r\n                return this.isISIN(value);\r\n            case ValidationTypes.IS_ISO8601:\r\n                return this.isISO8601(value);\r\n            case ValidationTypes.IS_JSON:\r\n                return this.isJSON(value);\r\n            case ValidationTypes.IS_LOWERCASE:\r\n                return this.isLowercase(value);\r\n            case ValidationTypes.IS_MOBILE_PHONE:\r\n                return this.isMobilePhone(value, metadata.constraints[0]);\r\n            case ValidationTypes.IS_PHONE_NUMBER:\r\n                return this.isPhoneNumber(value, metadata.constraints[0]);\r\n            case ValidationTypes.IS_MONGO_ID:\r\n                return this.isMongoId(value);\r\n            case ValidationTypes.IS_MULTIBYTE:\r\n                return this.isMultibyte(value);\r\n            case ValidationTypes.IS_SURROGATE_PAIR:\r\n                return this.isSurrogatePair(value);\r\n            case ValidationTypes.IS_URL:\r\n                return this.isURL(value, metadata.constraints[0]);\r\n            case ValidationTypes.IS_UUID:\r\n                return this.isUUID(value, metadata.constraints[0]);\r\n            case ValidationTypes.IS_UPPERCASE:\r\n                return this.isUppercase(value);\r\n            case ValidationTypes.LENGTH:\r\n                return this.length(value, metadata.constraints[0], metadata.constraints[1]);\r\n            case ValidationTypes.MIN_LENGTH:\r\n                return this.minLength(value, metadata.constraints[0]);\r\n            case ValidationTypes.MAX_LENGTH:\r\n                return this.maxLength(value, metadata.constraints[0]);\r\n            case ValidationTypes.MATCHES:\r\n                return this.matches(value, metadata.constraints[0], metadata.constraints[1]);\r\n            case ValidationTypes.IS_MILITARY_TIME:\r\n                return this.isMilitaryTime(value);\r\n\r\n            /* array checkers */\r\n            case ValidationTypes.ARRAY_CONTAINS:\r\n                return this.arrayContains(value, metadata.constraints[0]);\r\n            case ValidationTypes.ARRAY_NOT_CONTAINS:\r\n                return this.arrayNotContains(value, metadata.constraints[0]);\r\n            case ValidationTypes.ARRAY_NOT_EMPTY:\r\n                return this.arrayNotEmpty(value);\r\n            case ValidationTypes.ARRAY_MIN_SIZE:\r\n                return this.arrayMinSize(value, metadata.constraints[0]);\r\n            case ValidationTypes.ARRAY_MAX_SIZE:\r\n                return this.arrayMaxSize(value, metadata.constraints[0]);\r\n            case ValidationTypes.ARRAY_UNIQUE:\r\n                return this.arrayUnique(value);\r\n\r\n            case ValidationTypes.IS_INSTANCE:\r\n                return this.isInstance(value, metadata.constraints[0]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Validation Methods: common checkers\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if value is defined (!== undefined, !== null).\r\n     */\r\n    isDefined(value: any): boolean {\r\n        return value !== undefined && value !== null;\r\n    }\r\n\r\n    /**\r\n     * Checks if value matches (\"===\") the comparison.\r\n     */\r\n    equals(value: any, comparison: any): boolean {\r\n        return value === comparison;\r\n    }\r\n\r\n    /**\r\n     * Checks if value does not match (\"!==\") the comparison.\r\n     */\r\n    notEquals(value: any, comparison: any): boolean {\r\n        return value !== comparison;\r\n    }\r\n\r\n    /**\r\n     * Checks if given value is empty (=== '', === null, === undefined).\r\n     */\r\n    isEmpty(value: any): boolean {\r\n        return value === \"\" || value === null || value === undefined;\r\n    }\r\n\r\n    /**\r\n     * Checks if given value is not empty (!== '', !== null, !== undefined).\r\n     */\r\n    isNotEmpty(value: any): boolean {\r\n        return value !== \"\" && value !== null && value !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Checks if given value is in a array of allowed values.\r\n     */\r\n    isIn(value: any, possibleValues: any[]): boolean {\r\n        return !(possibleValues instanceof Array) || possibleValues.some(possibleValue => possibleValue === value);\r\n    }\r\n\r\n    /**\r\n     * Checks if given value not in a array of allowed values.\r\n     */\r\n    isNotIn(value: any, possibleValues: any[]): boolean {\r\n        return !(possibleValues instanceof Array) || !possibleValues.some(possibleValue => possibleValue === value);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Validation Methods: type checkers\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if a given value is a real boolean.\r\n     */\r\n    isBoolean(value: any): boolean {\r\n        return value instanceof Boolean || typeof value === \"boolean\";\r\n    }\r\n\r\n    /**\r\n     * Checks if a given value is a real date.\r\n     */\r\n    isDate(value: any): boolean {\r\n        return value instanceof Date && !isNaN(value.getTime());\r\n    }\r\n\r\n    /**\r\n     * Checks if a given value is a real string.\r\n     */\r\n    isString(value: any): boolean {\r\n        return value instanceof String || typeof value === \"string\";\r\n    }\r\n\r\n    /**\r\n     * Checks if a given value is a ISOString date.\r\n     */\r\n    isDateString(value: any): boolean {\r\n        const regex = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(?:Z|\\+[0-2]\\d(?:\\:[0-5]\\d)?)?/g;\r\n        return this.isString(value) && regex.test(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if a given value is an array\r\n     */\r\n    isArray(value: any): boolean {\r\n        return value instanceof Array;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given value is an enum\r\n     */\r\n    isEnum(value: any, entity: any): boolean {\r\n        const enumValues = Object.keys(entity)\r\n            .map(k => entity[k]);\r\n        return enumValues.indexOf(value) >= 0;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given value is a number.\r\n     */\r\n    isNumber(value: any, options: IsNumberOptions = {}): boolean {\r\n        if (value === Infinity || value === -Infinity) {\r\n            return options.allowInfinity;\r\n        }\r\n\r\n        if (Number.isNaN(value)) {\r\n            return options.allowNaN;\r\n        }\r\n\r\n        return Number.isFinite(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if value is an integer.\r\n     */\r\n    isInt(val: number): boolean {\r\n        return Number.isInteger(val);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Validation Methods: number checkers\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if value is a number that's divisible by another.\r\n     */\r\n    isDivisibleBy(value: number, num: number): boolean {\r\n        return  typeof value === \"number\" &&\r\n            typeof num === \"number\" &&\r\n            this.validatorJs.isDivisibleBy(String(value), num);\r\n    }\r\n\r\n    /**\r\n     * Checks if the value is a positive number.\r\n     */\r\n    isPositive(value: number): boolean {\r\n        return typeof value === \"number\" && value > 0;\r\n    }\r\n\r\n    /**\r\n     * Checks if the value is a negative number.\r\n     */\r\n    isNegative(value: number): boolean {\r\n        return typeof value === \"number\" && value < 0;\r\n    }\r\n\r\n    /**\r\n     * Checks if the first number is greater than or equal to the second.\r\n     */\r\n    min(num: number, min: number): boolean {\r\n        return typeof num === \"number\" && typeof min === \"number\" && num >= min;\r\n    }\r\n\r\n    /**\r\n     * Checks if the first number is less than or equal to the second.\r\n     */\r\n    max(num: number, max: number): boolean {\r\n        return typeof num === \"number\" && typeof max === \"number\" && num <= max;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Validation Methods: date checkers\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if the value is a date that's after the specified date.\r\n     */\r\n    minDate(date: Date, minDate: Date): boolean {\r\n        return date && date.getTime() >= minDate.getTime();\r\n    }\r\n\r\n    /**\r\n     * Checks if the value is a date that's before the specified date.\r\n     */\r\n    maxDate(date: Date, maxDate: Date): boolean {\r\n        return date && date.getTime() <= maxDate.getTime();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Validation Methods: string-as-type checkers\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if a string is a boolean.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isBooleanString(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isBoolean(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is numeric.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isNumberString(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isNumeric(value);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Validation Methods: string checkers\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if the string contains the seed.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    contains(value: string, seed: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.contains(value, seed);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string does not contain the seed.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    notContains(value: string, seed: string): boolean {\r\n        return typeof value === \"string\" && !this.validatorJs.contains(value, seed);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string contains only letters (a-zA-Z).\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isAlpha(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isAlpha(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string contains only letters and numbers.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isAlphanumeric(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isAlphanumeric(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string contains ASCII chars only.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isAscii(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isAscii(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if a string is base64 encoded.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isBase64(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isBase64(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string's length (in bytes) falls in a range.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isByteLength(value: string, min: number, max?: number): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isByteLength(value, min, max);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is a credit card.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isCreditCard(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isCreditCard(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is a valid currency amount.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isCurrency(value: string, options?: IsCurrencyOptions): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isCurrency(value, options);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is an email.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isEmail(value: string, options?: IsEmailOptions): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isEmail(value, options);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is a fully qualified domain name (e.g. domain.com).\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isFQDN(value: string, options?: IsFQDNOptions): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isFQDN(value, options);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string contains any full-width chars.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isFullWidth(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isFullWidth(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string contains any half-width chars.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isHalfWidth(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isHalfWidth(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string contains variable-width chars.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isVariableWidth(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isVariableWidth(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is a hexadecimal color.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isHexColor(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isHexColor(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is a hexadecimal number.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isHexadecimal(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isHexadecimal(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is an IP (version 4 or 6).\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isIP(value: string, version?: \"4\"|\"6\"): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isIP(value, version);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is an ISBN (version 10 or 13).\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isISBN(value: string, version?: \"10\"|\"13\"): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isISBN(value, version);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is an ISIN (stock/security identifier).\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isISIN(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isISIN(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is a valid ISO 8601 date.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isISO8601(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isISO8601(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is valid JSON (note: uses JSON.parse).\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isJSON(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isJSON(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is lowercase.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isLowercase(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isLowercase(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is a mobile phone number (locale is one of ['zh-CN', 'zh-TW', 'en-ZA', 'en-AU', 'en-HK',\r\n     * 'pt-PT', 'fr-FR', 'el-GR', 'en-GB', 'en-US', 'en-ZM', 'ru-RU', 'nb-NO', 'nn-NO', 'vi-VN', 'en-NZ']).\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isMobilePhone(value: string, locale: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isMobilePhone(value, locale);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is a valid phone number.\r\n     * @param value the potential phone number string to test\r\n     * @param {string} region 2 characters uppercase country code (e.g. DE, US, CH).\r\n     * If users must enter the intl. prefix (e.g. +41), then you may pass \"ZZ\" or null as region.\r\n     * See [google-libphonenumber, metadata.js:countryCodeToRegionCodeMap on github]{@link https://github.com/ruimarinho/google-libphonenumber/blob/1e46138878cff479aafe2ce62175c6c49cb58720/src/metadata.js#L33}\r\n     */\r\n    isPhoneNumber(value: string, region: string): boolean {\r\n        try {\r\n            const phoneNum = this.libPhoneNumber.phoneUtil.parseAndKeepRawInput(value, region);\r\n            return this.libPhoneNumber.phoneUtil.isValidNumber(phoneNum);\r\n        } catch (error) {\r\n            // logging?\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isMongoId(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isMongoId(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string contains one or more multibyte chars.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isMultibyte(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isMultibyte(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string contains any surrogate pairs chars.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isSurrogatePair(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isSurrogatePair(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is an url.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isURL(value: string, options?: IsURLOptions): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isURL(value, options);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is a UUID (version 3, 4 or 5).\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isUUID(value: string, version?: \"3\"|\"4\"|\"5\"): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isUUID(value, version);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string is uppercase.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    isUppercase(value: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isUppercase(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    length(value: string, min: number, max?: number): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.isLength(value, min, max);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string's length is not less than given number. Note: this function takes into account surrogate pairs.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    minLength(value: string, min: number) {\r\n        return typeof value === \"string\" && this.length(value, min);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    maxLength(value: string, max: number) {\r\n        return typeof value === \"string\" && this.length(value, 0, max);\r\n    }\r\n\r\n    /**\r\n     * Checks if string matches the pattern. Either matches('foo', /foo/i) or matches('foo', 'foo', 'i').\r\n     * If given value is not a string, then it returns false.\r\n     */\r\n    matches(value: string, pattern: RegExp, modifiers?: string): boolean {\r\n        return typeof value === \"string\" && this.validatorJs.matches(value, pattern, modifiers);\r\n    }\r\n\r\n    /**\r\n     * Checks if the string represents a time without a given timezone in the format HH:MM (military)\r\n     * If the given value does not match the pattern HH:MM, then it returns false.\r\n     */\r\n    isMilitaryTime(value: string): boolean {\r\n        return this.matches(value, /^([01]\\d|2[0-3]):?([0-5]\\d)$/);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Validation Methods: array checkers\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if array contains all values from the given array of values.\r\n     * If null or undefined is given then this function returns false.\r\n     */\r\n    arrayContains(array: any[], values: any[]) {\r\n        if (!(array instanceof Array))\r\n            return false;\r\n\r\n        return !array || values.every(value => array.indexOf(value) !== -1);\r\n    }\r\n\r\n    /**\r\n     * Checks if array does not contain any of the given values.\r\n     * If null or undefined is given then this function returns false.\r\n     */\r\n    arrayNotContains(array: any[], values: any[]) {\r\n        if (!(array instanceof Array))\r\n            return false;\r\n\r\n        return !array || values.every(value => array.indexOf(value) === -1);\r\n    }\r\n\r\n    /**\r\n     * Checks if given array is not empty.\r\n     * If null or undefined is given then this function returns false.\r\n     */\r\n    arrayNotEmpty(array: any[]) {\r\n        if (!(array instanceof Array))\r\n            return false;\r\n\r\n        return array instanceof Array && array.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Checks if array's length is as minimal this number.\r\n     * If null or undefined is given then this function returns false.\r\n     */\r\n    arrayMinSize(array: any[], min: number) {\r\n        if (!(array instanceof Array))\r\n            return false;\r\n\r\n        return array instanceof Array && array.length >= min;\r\n    }\r\n\r\n    /**\r\n     * Checks if array's length is as maximal this number.\r\n     * If null or undefined is given then this function returns false.\r\n     */\r\n    arrayMaxSize(array: any[], max: number) {\r\n        if (!(array instanceof Array))\r\n            return false;\r\n\r\n        return array instanceof Array && array.length <= max;\r\n    }\r\n\r\n    /**\r\n     * Checks if all array's values are unique. Comparison for objects is reference-based.\r\n     * If null or undefined is given then this function returns false.\r\n     */\r\n    arrayUnique(array: any[]) {\r\n        if (!(array instanceof Array))\r\n            return false;\r\n\r\n        const uniqueItems = array.filter((a, b, c) => c.indexOf(a) === b);\r\n        return array.length === uniqueItems.length;\r\n    }\r\n\r\n    /**\r\n     * Checks if the value is an instance of the specified object.\r\n     */\r\n    isInstance(object: any, targetTypeConstructor: new (...args: any[]) => any) {\r\n        return targetTypeConstructor\r\n            && typeof targetTypeConstructor === \"function\"\r\n            && object instanceof targetTypeConstructor;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}