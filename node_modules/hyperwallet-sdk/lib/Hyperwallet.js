"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _objectAssign = require("object-assign");

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _ApiClient = require("./utils/ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The Hyperwallet SDK Client
 */

var Hyperwallet = function () {

    /**
     * Create a instance of the SDK Client
     *
     * @param {Object} config - The API config
     * @param {string} config.username - The API username
     * @param {string} config.password - The API password
     * @param {string} [config.programToken] - The program token that is used for some API calls
     * @param {string} [config.server=https://sandbox.hyperwallet.com] - The API server to connect to
     */

    function Hyperwallet(_ref) {
        var username = _ref.username;
        var password = _ref.password;
        var programToken = _ref.programToken;
        var _ref$server = _ref.server;
        var server = _ref$server === undefined ? "https://sandbox.hyperwallet.com" : _ref$server;

        _classCallCheck(this, Hyperwallet);

        if (!username || !password) {
            throw new Error("You need to specify your API username and password!");
        }

        /**
         * The instance of the ApiClient
         *
         * @type {ApiClient}
         * @protected
         */
        this.client = new _ApiClient2.default(username, password, server);

        /**
         * The program token that is used for some API calls
         *
         * @type {string}
         * @protected
         */
        this.programToken = programToken;
    }

    //--------------------------------------
    // Users
    //--------------------------------------

    /**
     * Create a user
     *
     * @param {Object} data - The user data
     * @param {api-callback} callback - The callback for this call
     */


    _createClass(Hyperwallet, [{
        key: "createUser",
        value: function createUser(data, callback) {
            this.addProgramToken(data);
            this.client.doPost("users", data, {}, callback);
        }

        /**
         * Load a user
         *
         * @param {string} userToken - The user token
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if userToken is not provided
         */

    }, {
        key: "getUser",
        value: function getUser(userToken, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            this.client.doGet("users/" + encodeURIComponent(userToken), {}, callback);
        }

        /**
         * Update a user
         *
         * @param {string} userToken - The user token
         * @param {Object} data - The user data that should be updated
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if userToken is not provided
         */

    }, {
        key: "updateUser",
        value: function updateUser(userToken, data, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            this.addProgramToken(data);
            this.client.doPut("users/" + encodeURIComponent(userToken), data, {}, callback);
        }

        /**
         * List all users
         *
         * @param {Object} options - The query parameters to send
         * @param {api-callback} callback - The callback for this call
         */

    }, {
        key: "listUsers",
        value: function listUsers(options, callback) {
            this.client.doGet("users", options, Hyperwallet.handle204Response(callback));
        }

        //--------------------------------------
        // Prepaid Cards
        //--------------------------------------

        /**
         * Create a prepaid card
         *
         * @param {string} userToken - The user token
         * @param {Object} data - The prepaid card data
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if userToken is not provided
         */

    }, {
        key: "createPrepaidCard",
        value: function createPrepaidCard(userToken, data, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            this.client.doPost("users/" + encodeURIComponent(userToken) + "/prepaid-cards", data, {}, callback);
        }

        /**
         * Get a prepaid card
         *
         * @param {string} userToken - The user token
         * @param {string} prepaidCardToken - The prepaid card token
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if userToken or prepaidCardToken is not provided
         */

    }, {
        key: "getPrepaidCard",
        value: function getPrepaidCard(userToken, prepaidCardToken, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!prepaidCardToken) {
                throw new Error("prepaidCardToken is required");
            }
            this.client.doGet("users/" + encodeURIComponent(userToken) + "/prepaid-cards/" + encodeURIComponent(prepaidCardToken), {}, callback);
        }

        /**
         * Update a prepaid card
         *
         * @param {string} userToken - The user token
         * @param {string} prepaidCardToken - The prepaid card token
         * @param {Object} data - The prepaid card data to update
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if userToken or prepaidCardToken is not provided
         */

    }, {
        key: "updatePrepaidCard",
        value: function updatePrepaidCard(userToken, prepaidCardToken, data, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!prepaidCardToken) {
                throw new Error("prepaidCardToken is required");
            }
            this.client.doPut("users/" + encodeURIComponent(userToken) + "/prepaid-cards/" + encodeURIComponent(prepaidCardToken), data, {}, callback);
        }

        /**
         * List all prepaid cards
         *
         * @param {string} userToken - The user token
         * @param {Object} options - The query parameters to send
         * @param {api-callback} callback - The callback for this call
         * @throws Will throw an error if userToken is not provided
         */

    }, {
        key: "listPrepaidCards",
        value: function listPrepaidCards(userToken, options, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            this.client.doGet("users/" + encodeURIComponent(userToken) + "/prepaid-cards", options, Hyperwallet.handle204Response(callback));
        }

        /**
         * Suspend a prepaid card
         *
         * @param {string} userToken - The user token
         * @param {string} prepaidCardToken - The prepaid card token
         * @param {api-callback} callback - The callback for this call
         * @throws Will throw an error if userToken or prepaidCardToken is not provided
         */

    }, {
        key: "suspendPrepaidCard",
        value: function suspendPrepaidCard(userToken, prepaidCardToken, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!prepaidCardToken) {
                throw new Error("prepaidCardToken is required");
            }

            var transition = {
                transition: "SUSPENDED"
            };
            this.client.doPost("users/" + encodeURIComponent(userToken) + "/prepaid-cards/" + encodeURIComponent(prepaidCardToken) + "/status-transitions", transition, {}, callback);
        }

        /**
         * Unsuspend a prepaid card
         *
         * @param {string} userToken - The user token
         * @param {string} prepaidCardToken - The prepaid card token
         * @param {api-callback} callback - The callback for this call
         * @throws Will throw an error if userToken or prepaidCardToken is not provided
         */

    }, {
        key: "unsuspendPrepaidCard",
        value: function unsuspendPrepaidCard(userToken, prepaidCardToken, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!prepaidCardToken) {
                throw new Error("prepaidCardToken is required");
            }

            var transition = {
                transition: "UNSUSPENDED"
            };
            this.client.doPost("users/" + encodeURIComponent(userToken) + "/prepaid-cards/" + encodeURIComponent(prepaidCardToken) + "/status-transitions", transition, {}, callback);
        }

        /**
         * Mark a prepaid card as lost or stolen
         *
         * @param {string} userToken - The user token
         * @param {string} prepaidCardToken - The prepaid card token
         * @param {api-callback} callback - The callback for this call
         * @throws Will throw an error if userToken or prepaidCardToken is not provided
         */

    }, {
        key: "lostOrStolenPrepaidCard",
        value: function lostOrStolenPrepaidCard(userToken, prepaidCardToken, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!prepaidCardToken) {
                throw new Error("prepaidCardToken is required");
            }

            var transition = {
                transition: "LOST_OR_STOLEN"
            };
            this.client.doPost("users/" + encodeURIComponent(userToken) + "/prepaid-cards/" + encodeURIComponent(prepaidCardToken) + "/status-transitions", transition, {}, callback);
        }

        /**
         * Deactivate a prepaid card
         *
         * @param {string} userToken - The user token
         * @param {string} prepaidCardToken - The prepaid card token
         * @param {api-callback} callback - The callback for this call
         * @throws Will throw an error if userToken or prepaidCardToken is not provided
         */

    }, {
        key: "deactivatePrepaidCard",
        value: function deactivatePrepaidCard(userToken, prepaidCardToken, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!prepaidCardToken) {
                throw new Error("prepaidCardToken is required");
            }

            var transition = {
                transition: "DE_ACTIVATED"
            };
            this.client.doPost("users/" + encodeURIComponent(userToken) + "/prepaid-cards/" + encodeURIComponent(prepaidCardToken) + "/status-transitions", transition, {}, callback);
        }

        /**
         * Lock a prepaid card
         *
         * @param {string} userToken - The user token
         * @param {string} prepaidCardToken - The prepaid card token
         * @param {api-callback} callback - The callback for this call
         * @throws Will throw an error if userToken or prepaidCardToken is not provided
         */

    }, {
        key: "lockPrepaidCard",
        value: function lockPrepaidCard(userToken, prepaidCardToken, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!prepaidCardToken) {
                throw new Error("prepaidCardToken is required");
            }

            var transition = {
                transition: "LOCKED"
            };
            this.client.doPost("users/" + encodeURIComponent(userToken) + "/prepaid-cards/" + encodeURIComponent(prepaidCardToken) + "/status-transitions", transition, {}, callback);
        }

        /**
         * Unlock a prepaid card
         *
         * @param {string} userToken - The user token
         * @param {string} prepaidCardToken - The prepaid card token
         * @param {api-callback} callback - The callback for this call
         * @throws Will throw an error if userToken or prepaidCardToken is not provided
         */

    }, {
        key: "unlockPrepaidCard",
        value: function unlockPrepaidCard(userToken, prepaidCardToken, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!prepaidCardToken) {
                throw new Error("prepaidCardToken is required");
            }

            var transition = {
                transition: "UNLOCKED"
            };
            this.client.doPost("users/" + encodeURIComponent(userToken) + "/prepaid-cards/" + encodeURIComponent(prepaidCardToken) + "/status-transitions", transition, {}, callback);
        }

        /**
         * Create a prepaid card status transition
         *
         * @param {string} userToken - The user token
         * @param {string} prepaidCardToken - The prepaid card token
         * @param {Object} data - The prepaid card status transition data
         * @param {api-callback} callback - The callback for this call
         * @throws Will throw an error if userToken or prepaidCardToken is not provided
         */

    }, {
        key: "createPrepaidCardStatusTransition",
        value: function createPrepaidCardStatusTransition(userToken, prepaidCardToken, data, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!prepaidCardToken) {
                throw new Error("prepaidCardToken is required");
            }

            this.client.doPost("users/" + encodeURIComponent(userToken) + "/prepaid-cards/" + encodeURIComponent(prepaidCardToken) + "/status-transitions", data, {}, callback);
        }

        /**
         * Get a prepaid card status transition
         *
         * @param {string} userToken - The user token
         * @param {string} prepaidCardToken - The prepaid card token
         * @param {string} statusTransitionToken - The prepaid card status transition token
         * @param {api-callback} callback - The callback for this call
         * @throws Will throw an error if userToken, prepaidCardToken or statusTransitionToken is not provided
         */

    }, {
        key: "getPrepaidCardStatusTransition",
        value: function getPrepaidCardStatusTransition(userToken, prepaidCardToken, statusTransitionToken, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!prepaidCardToken) {
                throw new Error("prepaidCardToken is required");
            }
            if (!statusTransitionToken) {
                throw new Error("statusTransitionToken is required");
            }

            this.client.doGet("users/" + encodeURIComponent(userToken) + "/prepaid-cards/" + encodeURIComponent(prepaidCardToken) + "/status-transitions/" + encodeURIComponent(statusTransitionToken), {}, callback);
        }

        /**
         * List all prepaid card status transitions
         *
         * @param {string} userToken - The user token
         * @param {string} prepaidCardToken - The prepaid card token
         * @param {Object} options - The query parameters to send
         * @param {api-callback} callback - The callback for this call
         * @throws Will throw an error if userToken or prepaidCardToken is not provided
         */

    }, {
        key: "listPrepaidCardStatusTransitions",
        value: function listPrepaidCardStatusTransitions(userToken, prepaidCardToken, options, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!prepaidCardToken) {
                throw new Error("prepaidCardToken is required");
            }
            this.client.doGet("users/" + encodeURIComponent(userToken) + "/prepaid-cards/" + encodeURIComponent(prepaidCardToken) + "/status-transitions", options, Hyperwallet.handle204Response(callback));
        }

        //--------------------------------------
        // Bank Accounts
        //--------------------------------------

        /**
         * Create a bank account
         *
         * @param {string} userToken - The user token
         * @param {Object} data - The bank account data
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if userToken is not provided
         */

    }, {
        key: "createBankAccount",
        value: function createBankAccount(userToken, data, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            this.client.doPost("users/" + encodeURIComponent(userToken) + "/bank-accounts", data, {}, callback);
        }

        /**
         * Get a bank account
         *
         * @param {string} userToken - The user token
         * @param {string} bankAccountToken - The bank account token
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if userToken or bankAccountToken is not provided
         */

    }, {
        key: "getBankAccount",
        value: function getBankAccount(userToken, bankAccountToken, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!bankAccountToken) {
                throw new Error("bankAccountToken is required");
            }
            this.client.doGet("users/" + encodeURIComponent(userToken) + "/bank-accounts/" + encodeURIComponent(bankAccountToken), {}, callback);
        }

        /**
         * Update a bank account
         *
         * @param {string} userToken - The user token
         * @param {string} bankAccountToken - The bank account token
         * @param {Object} data - The bank account data to update
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if userToken or bankAccountToken is not provided
         */

    }, {
        key: "updateBankAccount",
        value: function updateBankAccount(userToken, bankAccountToken, data, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!bankAccountToken) {
                throw new Error("bankAccountToken is required");
            }
            this.client.doPut("users/" + encodeURIComponent(userToken) + "/bank-accounts/" + encodeURIComponent(bankAccountToken), data, {}, callback);
        }

        /**
         * List all bank accounts
         *
         * @param {string} userToken - The user token
         * @param {Object} options - The query parameters to send
         * @param {api-callback} callback - The callback for this call
         * @throws Will throw an error if userToken is not provided
         */

    }, {
        key: "listBankAccounts",
        value: function listBankAccounts(userToken, options, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            this.client.doGet("users/" + encodeURIComponent(userToken) + "/bank-accounts", options, Hyperwallet.handle204Response(callback));
        }

        /**
         * Deactivate a bank account
         *
         * @param {string} userToken - The user token
         * @param {string} bankAccountToken - The bank account token
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if userToken or bankAccountToken is not provided
         */

    }, {
        key: "deactivateBankAccount",
        value: function deactivateBankAccount(userToken, bankAccountToken, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!bankAccountToken) {
                throw new Error("bankAccountToken is required");
            }

            var transition = {
                transition: "DE-ACTIVATED"
            };
            this.client.doPost("users/" + encodeURIComponent(userToken) + "/bank-accounts/" + encodeURIComponent(bankAccountToken) + "/status-transitions", transition, {}, callback);
        }

        /**
         * Create a bank account status transition
         *
         * @param {string} userToken - The user token
         * @param {string} bankAccountToken - The bank account token
         * @param {Object} data - The bank account status transition data
         * @param {api-callback} callback - The callback for this call
         * @throws Will throw an error if userToken or bankAccountToken is not provided
         */

    }, {
        key: "createBankAccountStatusTransition",
        value: function createBankAccountStatusTransition(userToken, bankAccountToken, data, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!bankAccountToken) {
                throw new Error("bankAccountToken is required");
            }

            this.client.doPost("users/" + encodeURIComponent(userToken) + "/bank-accounts/" + encodeURIComponent(bankAccountToken) + "/status-transitions", data, {}, callback);
        }

        /**
         * List all bank account status transitions
         *
         * @param {string} userToken - The user token
         * @param {string} bankAccountToken - The bank account token
         * @param {Object} options - The query parameters to send
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if userToken or bankAccountToken is not provided
         */

    }, {
        key: "listBankAccountStatusTransitions",
        value: function listBankAccountStatusTransitions(userToken, bankAccountToken, options, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!bankAccountToken) {
                throw new Error("bankAccountToken is required");
            }
            this.client.doGet("users/" + encodeURIComponent(userToken) + "/bank-accounts/" + encodeURIComponent(bankAccountToken) + "/status-transitions", options, Hyperwallet.handle204Response(callback));
        }

        //--------------------------------------
        // Balances
        //--------------------------------------

        /**
         * List balances for a user
         *
         * @param {string} userToken - The user token
         * @param {Object} options - The query parameters to send
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if userToken is not provided
         */

    }, {
        key: "listBalancesForUser",
        value: function listBalancesForUser(userToken, options, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            this.client.doGet("users/" + encodeURIComponent(userToken) + "/balances", options, Hyperwallet.handle204Response(callback));
        }

        /**
         * List balances for a prepaid card
         *
         * @param {string} userToken - The user token
         * @param {string} prepaidCardToken - The prepaid card token
         * @param {Object} options - The query parameters to send
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if userToken or prepaidCardToken is not provided
         */

    }, {
        key: "listBalancesForPrepaidCard",
        value: function listBalancesForPrepaidCard(userToken, prepaidCardToken, options, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!prepaidCardToken) {
                throw new Error("prepaidCardToken is required");
            }
            this.client.doGet("users/" + encodeURIComponent(userToken) + "/prepaid-cards/" + encodeURIComponent(prepaidCardToken) + "/balances", options, Hyperwallet.handle204Response(callback));
        }

        //--------------------------------------
        // Payments
        //--------------------------------------

        /**
         * Create a payment
         *
         * @param {Object} data - The payment data
         * @param {api-callback} callback - The callback for this call
         */

    }, {
        key: "createPayment",
        value: function createPayment(data, callback) {
            this.addProgramToken(data);
            this.client.doPost("payments", data, {}, callback);
        }

        /**
         * Get a payment
         *
         * @param {string} paymentToken - The payment token
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if paymentToken is not provided
         */

    }, {
        key: "getPayment",
        value: function getPayment(paymentToken, callback) {
            if (!paymentToken) {
                throw new Error("paymentToken is required");
            }
            this.client.doGet("payments/" + encodeURIComponent(paymentToken), {}, callback);
        }

        /**
         * List all payments
         *
         * @param {Object} options - The query parameters to send
         * @param {api-callback} callback - The callback for this call
         */

    }, {
        key: "listPayments",
        value: function listPayments(options, callback) {
            this.client.doGet("payments", options, Hyperwallet.handle204Response(callback));
        }

        //--------------------------------------
        // Programs
        //--------------------------------------

        /**
         * Get a program
         *
         * @param {string} programToken - The program token
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if programToken is not provided
         */

    }, {
        key: "getProgram",
        value: function getProgram(programToken, callback) {
            if (!programToken) {
                throw new Error("programToken is required");
            }
            this.client.doGet("programs/" + encodeURIComponent(programToken), {}, callback);
        }

        //--------------------------------------
        // Program Accounts
        //--------------------------------------

        /**
         * Get a program account
         *
         * @param {string} programToken - The program token
         * @param {string} accountToken - The account token
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if programToken is not provided
         */

    }, {
        key: "getProgramAccount",
        value: function getProgramAccount(programToken, accountToken, callback) {
            if (!programToken) {
                throw new Error("programToken is required");
            }
            if (!accountToken) {
                throw new Error("accountToken is required");
            }
            this.client.doGet("programs/" + encodeURIComponent(programToken) + "/accounts/" + encodeURIComponent(accountToken), {}, callback);
        }

        //--------------------------------------
        // Transfer Method Configurations
        //--------------------------------------

        /**
         * Get a transfer method configuration
         *
         * @param {string} userToken - The user token
         * @param {string} country - The transfer method country
         * @param {string} currency - The transfer method currency
         * @param {string} type - The transfer method type
         * @param {string} profileType - The profile type
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if userToken, country, currency, type or profileType is not provided
         */

    }, {
        key: "getTransferMethodConfiguration",
        value: function getTransferMethodConfiguration(userToken, country, currency, type, profileType, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            if (!country) {
                throw new Error("country is required");
            }
            if (!currency) {
                throw new Error("currency is required");
            }
            if (!type) {
                throw new Error("type is required");
            }
            if (!profileType) {
                throw new Error("profileType is required");
            }
            this.client.doGet("transfer-method-configurations", {
                userToken: userToken,
                country: country,
                currency: currency,
                type: type,
                profileType: profileType
            }, callback);
        }

        /**
         * List all transfer method configurations
         *
         * @param {string} userToken - The user token
         * @param {Object} options - The query parameters to send
         * @param {api-callback} callback - The callback for this call
         *
         * @throws Will throw an error if userToken is not provided
         */

    }, {
        key: "listTransferMethodConfigurations",
        value: function listTransferMethodConfigurations(userToken, options, callback) {
            if (!userToken) {
                throw new Error("userToken is required");
            }
            var params = options ? (0, _objectAssign2.default)({}, options, { userToken: userToken }) : { userToken: userToken };
            this.client.doGet("transfer-method-configurations", params, Hyperwallet.handle204Response(callback));
        }

        //--------------------------------------
        // Internal utils
        //--------------------------------------

        /**
         * Add program token to data object if not already set
         *
         * @param {Object} data - The data object
         * @returns {Object} - The adjusted object
         *
         * @private
         */

    }, {
        key: "addProgramToken",
        value: function addProgramToken(data) {
            if (!data || !this.programToken) {
                return data;
            }
            if (data.programToken) {
                return data;
            }

            data.programToken = this.programToken; // eslint-disable-line no-param-reassign
            return data;
        }

        /**
         * Handle 204 response for list calls
         *
         * @param {api-callback} callback - The api callback
         * @returns {api-callback} - A wrapper api callback
         *
         * @private
         */

    }], [{
        key: "handle204Response",
        value: function handle204Response(callback) {
            return function (err, data, res) {
                if (!err && res.status === 204) {
                    callback(err, {
                        count: 0,
                        data: []
                    }, res);
                    return;
                }
                callback(err, data, res);
            };
        }
    }]);

    return Hyperwallet;
}();

exports.default = Hyperwallet;