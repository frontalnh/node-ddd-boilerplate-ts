{"version":3,"sources":["../../src/validation-schema/ValidationSchemaToMetadataTransformer.ts"],"names":[],"mappings":";;AACA,qEAAkE;AAGlE,iEAA8D;AAE9D;;GAEG;AACH;IAAA;IA6BA,CAAC;IA3BG,yDAAS,GAAT,UAAU,MAAwB;QAC9B,IAAM,SAAS,GAAyB,EAAE,CAAC;QAC3C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ;YAC3C,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAA,UAAU;gBAC1C,IAAI,CAAC,iCAAe,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;oBACzC,MAAM,IAAI,KAAK,CAAC,uBAAqB,MAAM,CAAC,IAAI,SAAI,QAAQ,2BAAsB,UAAU,CAAC,IAAM,CAAC,CAAC;gBAEzG,IAAM,iBAAiB,GAAsB;oBACzC,OAAO,EAAE,UAAU,CAAC,OAAO;oBAC3B,MAAM,EAAE,UAAU,CAAC,MAAM;oBACzB,MAAM,EAAE,UAAU,CAAC,MAAM;oBACzB,IAAI,EAAE,UAAU,CAAC,IAAI;iBACxB,CAAC;gBACF,IAAM,IAAI,GAA2B;oBACjC,IAAI,EAAE,UAAU,CAAC,IAAI;oBACrB,MAAM,EAAE,MAAM,CAAC,IAAI;oBACnB,YAAY,EAAE,QAAQ;oBACtB,WAAW,EAAE,UAAU,CAAC,WAAW;oBACnC,qBAAqB,EAAE,UAAU,CAAC,OAAO;oBACzC,iBAAiB,EAAE,iBAAiB;iBACvC,CAAC;gBACF,SAAS,CAAC,IAAI,CAAC,IAAI,uCAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,OAAO,SAAS,CAAC;IACrB,CAAC;IAEL,4CAAC;AAAD,CA7BA,AA6BC,IAAA;AA7BY,sFAAqC","file":"ValidationSchemaToMetadataTransformer.js","sourcesContent":["import {ValidationSchema} from \"./ValidationSchema\";\r\nimport {ValidationMetadata} from \"../metadata/ValidationMetadata\";\r\nimport {ValidationMetadataArgs} from \"../metadata/ValidationMetadataArgs\";\r\nimport {ValidationOptions} from \"../decorator/ValidationOptions\";\r\nimport {ValidationTypes} from \"../validation/ValidationTypes\";\r\n\r\n/**\r\n * Used to transform validation schemas to validation metadatas.\r\n */\r\nexport class ValidationSchemaToMetadataTransformer {\r\n\r\n    transform(schema: ValidationSchema): ValidationMetadata[] {\r\n        const metadatas: ValidationMetadata[] = [];\r\n        Object.keys(schema.properties).forEach(property => {\r\n            schema.properties[property].forEach(validation => {\r\n                if (!ValidationTypes.isValid(validation.type))\r\n                    throw new Error(`Validation schema ${schema.name}#${property} as incorrect type ${validation.type}`);\r\n                \r\n                const validationOptions: ValidationOptions = {\r\n                    message: validation.message,\r\n                    groups: validation.groups,\r\n                    always: validation.always,\r\n                    each: validation.each\r\n                };\r\n                const args: ValidationMetadataArgs = {\r\n                    type: validation.type,\r\n                    target: schema.name,\r\n                    propertyName: property,\r\n                    constraints: validation.constraints,\r\n                    validationTypeOptions: validation.options,\r\n                    validationOptions: validationOptions\r\n                };\r\n                metadatas.push(new ValidationMetadata(args));\r\n            });\r\n        });\r\n        return metadatas;\r\n    }\r\n\r\n}"],"sourceRoot":".."}