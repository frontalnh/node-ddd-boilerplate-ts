"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _superagent = require("superagent");

var _superagent2 = _interopRequireDefault(_superagent);

var _package = require("../../package.json");

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The callback interface for api calls
 *
 * @typedef {function} api-callback
 * @param {Object[]} [errors] - In case of an error an array with error objects otherwise undefined
 * @param {string} [errors[].fieldName] - The field name (if error is caused by a particular field)
 * @param {string} errors[].message - The error message
 * @param {string} errors[].code - The error code
 * @param {Object} data - The rest response body
 * @param {Object} res - The raw superagent response object
 */

/**
 * The Hyperwallet API Client
 */

var ApiClient = function () {

  /**
   * Create a instance of the API client
   *
   * @param {string} username - The API username
   * @param {string} password - The API password
   * @param {string} server - The API server to connect to
   */

  function ApiClient(username, password, server) {
    _classCallCheck(this, ApiClient);

    /**
     * The API username
     *
     * @type {string}
     * @protected
     */
    this.username = username;

    /**
     * The API password
     *
     * @type {string}
     * @protected
     */
    this.password = password;

    /**
     * The API server to connect to
     * @type {string}
     * @protected
     */
    this.server = server;

    /**
     * The Node SDK Version number
     *
     * @type {string}
     * @protected
     */
    this.version = _package2.default.version;
  }

  /**
   * Do a POST call to the Hyperwallet API server
   *
   * @param {string} partialUrl - The api endpoint to call (gets prefixed by `server` and `/rest/v3/`)
   * @param {Object} data - The data to send to the server
   * @param {Object} params - Query parameters to send in this call
   * @param {api-callback} callback - The callback for this call
   */


  _createClass(ApiClient, [{
    key: "doPost",
    value: function doPost(partialUrl, data, params, callback) {
      _superagent2.default.post(this.server + "/rest/v3/" + partialUrl).auth(this.username, this.password).set("User-Agent", "Hyperwallet Node SDK v" + this.version).type("json").accept("json").query(params).send(data).end(this.wrapCallback(callback));
    }

    /**
     * Do a PUT call to the Hyperwallet API server
     *
     * @param {string} partialUrl - The api endpoint to call (gets prefixed by `server` and `/rest/v3/`)
     * @param {Object} data - The data to send to the server
     * @param {Object} params - Query parameters to send in this call
     * @param {api-callback} callback - The callback for this call
     */

  }, {
    key: "doPut",
    value: function doPut(partialUrl, data, params, callback) {
      _superagent2.default.put(this.server + "/rest/v3/" + partialUrl).auth(this.username, this.password).set("User-Agent", "Hyperwallet Node SDK v" + this.version).type("json").accept("json").query(params).send(data).end(this.wrapCallback(callback));
    }

    /**
     * Do a GET call to the Hyperwallet API server
     *
     * @param {string} partialUrl - The api endpoint to call (gets prefixed by `server` and `/rest/v3/`)
     * @param {Object} params - Query parameters to send in this call
     * @param {api-callback} callback - The callback for this call
     */

  }, {
    key: "doGet",
    value: function doGet(partialUrl, params, callback) {
      _superagent2.default.get(this.server + "/rest/v3/" + partialUrl).auth(this.username, this.password).set("User-Agent", "Hyperwallet Node SDK v" + this.version).accept("json").query(params).end(this.wrapCallback(callback));
    }

    /**
     * Wrap a callback to process possible API and network errors
     *
     * @param {api-callback} callback - The final callback
     * @returns {function(err: Object, res: Object)} - The super agent callback
     *
     * @private
     */

  }, {
    key: "wrapCallback",
    value: function wrapCallback() {
      var _this = this;

      var callback = arguments.length <= 0 || arguments[0] === undefined ? function () {
        return null;
      } : arguments[0];

      return function (err, res) {
        if (!err) {
          callback(undefined, res.body, res);
          return;
        }

        var errors = [{
          message: "Could not communicate with " + _this.server,
          code: "COMMUNICATION_ERROR"
        }];
        if (res && res.body && res.body.errors) {
          errors = res.body.errors;
        }
        callback(errors, res ? res.body : undefined, res);
      };
    }
  }]);

  return ApiClient;
}();

exports.default = ApiClient;