{"version":3,"sources":["../../src/register-decorator.ts"],"names":[],"mappings":";;AACA,8DAA2D;AAC3D,oEAAiE;AAEjE,oEAAiE;AAEjE,gEAA6D;AAE7D,yCAA6C;AAwC7C;;GAEG;AACH,2BAAkC,OAAmC;IAEjE,IAAI,aAAuB,CAAC;IAC5B,IAAI,OAAO,CAAC,SAAS,YAAY,QAAQ,EAAE;QACvC,aAAa,GAAG,OAAO,CAAC,SAAqB,CAAC;KACjD;SAAM;QACH,IAAM,WAAS,GAAG,OAAO,CAAC,SAAyC,CAAC;QACpE,aAAa;YAAG;YAYhB,CAAC;YAXG,mCAAQ,GAAR,UAAS,KAAU,EAAE,mBAAyC;gBAC1D,OAAO,WAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAAC;YAC1D,CAAC;YAED,yCAAc,GAAd,UAAe,mBAAyC;gBACpD,IAAI,WAAS,CAAC,cAAc,EAAE;oBAC1B,OAAO,WAAS,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;iBACxD;gBAED,OAAO,EAAE,CAAC;YACd,CAAC;YACL,uBAAC;QAAD,CAZgB,AAYf,GAAA,CAAC;QACF,4BAAgB,CAAC,iCAAe,CAAC,CAAC,qBAAqB,CAAC,IAAI,uCAAkB,CAAC,aAAa,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;KAC/H;IAED,IAAM,sBAAsB,GAA2B;QACnD,IAAI,EAAE,iCAAe,CAAC,iBAAiB;QACvC,MAAM,EAAE,OAAO,CAAC,MAAM;QACtB,YAAY,EAAE,OAAO,CAAC,YAAY;QAClC,iBAAiB,EAAE,OAAO,CAAC,OAAO;QAClC,aAAa,EAAE,aAAa;QAC5B,WAAW,EAAE,OAAO,CAAC,WAAW;KACnC,CAAC;IACF,4BAAgB,CAAC,iCAAe,CAAC,CAAC,qBAAqB,CAAC,IAAI,uCAAkB,CAAC,sBAAsB,CAAC,CAAC,CAAC;AAC5G,CAAC;AAhCD,8CAgCC","file":"register-decorator.js","sourcesContent":["import {ValidatorOptions} from \"./validation/ValidatorOptions\";\r\nimport {MetadataStorage} from \"./metadata/MetadataStorage\";\r\nimport {ConstraintMetadata} from \"./metadata/ConstraintMetadata\";\r\nimport {ValidatorConstraintInterface} from \"./validation/ValidatorConstraintInterface\";\r\nimport {ValidationMetadata} from \"./metadata/ValidationMetadata\";\r\nimport {ValidationMetadataArgs} from \"./metadata/ValidationMetadataArgs\";\r\nimport {ValidationTypes} from \"./validation/ValidationTypes\";\r\nimport {ValidationArguments} from \"./validation/ValidationArguments\";\r\nimport {getFromContainer} from \"./container\";\r\n\r\nexport interface ValidationDecoratorOptions {\r\n\r\n    /**\r\n     * Target object to be validated.\r\n     */\r\n    target: Function;\r\n\r\n    /**\r\n     * Target object's property name to be validated.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * Name of the validation that is being registered.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Indicates if this decorator will perform async validation.\r\n     */\r\n    async?: boolean;\r\n\r\n    /**\r\n     * Validator options.\r\n     */\r\n    options?: ValidatorOptions;\r\n\r\n    /**\r\n     * Array of validation constraints.\r\n     */\r\n    constraints?: any[];\r\n\r\n    /**\r\n     * Validator that performs validation.\r\n     */\r\n    validator: ValidatorConstraintInterface|Function;\r\n}\r\n\r\n/**\r\n * Registers a custom validation decorator.\r\n */\r\nexport function registerDecorator(options: ValidationDecoratorOptions): void {\r\n\r\n    let constraintCls: Function;\r\n    if (options.validator instanceof Function) {\r\n        constraintCls = options.validator as Function;\r\n    } else {\r\n        const validator = options.validator as ValidatorConstraintInterface;\r\n        constraintCls = class CustomConstraint implements ValidatorConstraintInterface {\r\n            validate(value: any, validationArguments?: ValidationArguments): Promise<boolean>|boolean {\r\n                return validator.validate(value, validationArguments);\r\n            }\r\n\r\n            defaultMessage(validationArguments?: ValidationArguments) {\r\n                if (validator.defaultMessage) {\r\n                    return validator.defaultMessage(validationArguments);\r\n                }\r\n\r\n                return \"\";\r\n            }\r\n        };\r\n        getFromContainer(MetadataStorage).addConstraintMetadata(new ConstraintMetadata(constraintCls, options.name, options.async));\r\n    }\r\n\r\n    const validationMetadataArgs: ValidationMetadataArgs = {\r\n        type: ValidationTypes.CUSTOM_VALIDATION,\r\n        target: options.target,\r\n        propertyName: options.propertyName,\r\n        validationOptions: options.options,\r\n        constraintCls: constraintCls,\r\n        constraints: options.constraints\r\n    };\r\n    getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(validationMetadataArgs));\r\n}\r\n"],"sourceRoot":"."}