{"version":3,"file":"integration.js","sourceRoot":"","sources":["../src/integration.ts"],"names":[],"mappings":"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","sourcesContent":["import { Integration } from '@sentry/types';\nimport { logger } from '@sentry/utils/logger';\nimport { Options } from './interfaces';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport interface IntegrationIndex {\n  [key: string]: Integration;\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n  let integrations: Integration[] = [];\n  if (Array.isArray(userIntegrations)) {\n    const userIntegrationsNames = userIntegrations.map(i => i.name);\n    const pickedIntegrationsNames = [];\n\n    // Leave only unique default integrations, that were not overridden with provided user integrations\n    for (const defaultIntegration of defaultIntegrations) {\n      if (\n        userIntegrationsNames.indexOf(getIntegrationName(defaultIntegration)) === -1 &&\n        pickedIntegrationsNames.indexOf(getIntegrationName(defaultIntegration)) === -1\n      ) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames.push(getIntegrationName(defaultIntegration));\n      }\n    }\n\n    // Don't add same user integration twice\n    for (const userIntegration of userIntegrations) {\n      if (pickedIntegrationsNames.indexOf(getIntegrationName(userIntegration)) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames.push(getIntegrationName(userIntegration));\n      }\n    }\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    return [...defaultIntegrations];\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration, options: Options): void {\n  if (installedIntegrations.indexOf(getIntegrationName(integration)) !== -1) {\n    return;\n  }\n\n  try {\n    integration.setupOnce();\n  } catch (_Oo) {\n    /** @deprecated */\n    // TODO: Remove in v5\n    logger.warn(`Integration ${getIntegrationName(integration)}: The install method is deprecated. Use \"setupOnce\".`);\n\n    // tslint:disable:deprecation\n    if (integration.install) {\n      integration.install(options);\n    }\n    // tslint:enable:deprecation\n  }\n\n  installedIntegrations.push(getIntegrationName(integration));\n  logger.log(`Integration installed: ${getIntegrationName(integration)}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[getIntegrationName(integration)] = integration;\n    setupIntegration(integration, options);\n  });\n  return integrations;\n}\n\n/**\n * Returns the integration static id.\n * @param integration Integration to retrieve id\n */\nfunction getIntegrationName(integration: Integration): string {\n  /**\n   * @depracted\n   */\n  // tslint:disable-next-line:no-unsafe-any\n  return (integration as any).constructor.id || integration.name;\n}\n"]}