{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../src/integrations/pluggable/transaction.ts"],"names":[],"mappings":";;;AAAA,qCAAsE;AAGtE,wCAAwC;AACxC;IAAA;QACE;;WAEG;QACI,SAAI,GAAW,WAAW,CAAC,EAAE,CAAC;IAgDvC,CAAC;IA1CC;;OAEG;IACI,+BAAS,GAAhB;QAAA,iBAQC;QAPC,8BAAuB,CAAC,UAAM,KAAK;;;gBAC3B,IAAI,GAAG,oBAAa,EAAE,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;gBACzD,IAAI,IAAI,EAAE;oBACR,sBAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAC;iBAC5B;gBACD,sBAAO,KAAK,EAAC;;aACd,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACU,6BAAO,GAApB,UAAqB,KAAkB;;;;gBAC/B,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;gBAE9C,8DAA8D;gBAC9D,KAAS,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;oBACrC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBAExB,IAAI,KAAK,CAAC,MAAM,KAAK,IAAI,EAAE;wBACzB,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;wBAC/C,MAAM;qBACP;iBACF;gBAED,sBAAO,KAAK,EAAC;;;KACd;IAED,YAAY;IACJ,wCAAkB,GAA1B,UAA2B,KAAkB;QAC3C,IAAM,SAAS,GAAG,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACzF,OAAO,CAAC,SAAS,IAAI,SAAS,CAAC,UAAU,IAAI,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IAClF,CAAC;IAED,YAAY;IACJ,oCAAc,GAAtB,UAAuB,KAAiB;QACtC,OAAO,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAG,KAAK,CAAC,MAAM,IAAI,GAAG,WAAI,KAAK,CAAC,QAAQ,IAAI,GAAG,CAAE,CAAC,CAAC,CAAC,WAAW,CAAC;IAC1G,CAAC;IA9CD;;OAEG;IACW,cAAE,GAAW,aAAa,CAAC;IA4C3C,kBAAC;CAAA,AApDD,IAoDC;AApDY,kCAAW","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Integration, SentryEvent, StackFrame } from '@sentry/types';\n\n/** Add node transaction to the event */\nexport class Transaction implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Transaction.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Transaction';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async event => {\n      const self = getCurrentHub().getIntegration(Transaction);\n      if (self) {\n        return self.process(event);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async process(event: SentryEvent): Promise<SentryEvent> {\n    const frames = this.getFramesFromEvent(event);\n\n    // use for loop so we don't have to reverse whole frames array\n    for (let i = frames.length - 1; i >= 0; i--) {\n      const frame = frames[i];\n\n      if (frame.in_app === true) {\n        event.transaction = this.getTransaction(frame);\n        break;\n      }\n    }\n\n    return event;\n  }\n\n  /** JSDoc */\n  private getFramesFromEvent(event: SentryEvent): StackFrame[] {\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    return (exception && exception.stacktrace && exception.stacktrace.frames) || [];\n  }\n\n  /** JSDoc */\n  private getTransaction(frame: StackFrame): string {\n    return frame.module || frame.function ? `${frame.module || '?'}/${frame.function || '?'}` : '<unknown>';\n  }\n}\n"]}