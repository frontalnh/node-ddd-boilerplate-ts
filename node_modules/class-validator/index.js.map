{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;AAGA,8DAA2D;AAC3D,oDAAiD;AACjD,yCAA6C;AAE7C,4EAA4E;AAC5E,oCAAoC;AACpC,4EAA4E;AAE5E,iCAA4B;AAC5B,4CAAuC;AAGvC,kDAA6C;AAI7C,kDAA6C;AAC7C,4CAAuC;AAEvC,0CAAqC;AACrC,gDAA2C;AAgB3C;;GAEG;AACH,kBAAyB,kBAAiC,EACjC,yBAAmD,EACnD,qBAAwC;IAC7D,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE;QACxC,OAAO,4BAAgB,CAAC,qBAAS,CAAC,CAAC,QAAQ,CAAC,kBAA4B,EAAE,yBAAmC,EAAE,qBAAqB,CAAC,CAAC;KACzI;SAAM;QACH,OAAO,4BAAgB,CAAC,qBAAS,CAAC,CAAC,QAAQ,CAAC,kBAA4B,EAAE,yBAA6C,CAAC,CAAC;KAC5H;AACL,CAAC;AARD,4BAQC;AAYD;;GAEG;AACH,0BAAiC,kBAAiC,EACzC,yBAAmD,EACnD,qBAAwC;IAC7D,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE;QACxC,OAAO,4BAAgB,CAAC,qBAAS,CAAC,CAAC,gBAAgB,CAAC,kBAA4B,EAAE,yBAAmC,EAAE,qBAAqB,CAAC,CAAC;KACjJ;SAAM;QACH,OAAO,4BAAgB,CAAC,qBAAS,CAAC,CAAC,gBAAgB,CAAC,kBAA4B,EAAE,yBAA6C,CAAC,CAAC;KACpI;AACL,CAAC;AARD,4CAQC;AAgBD;;;;GAIG;AACH,sBAA6B,kBAAiC,EACjC,yBAAmD,EACnD,qBAAwC;IACjE,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE;QACxC,OAAO,4BAAgB,CAAC,qBAAS,CAAC,CAAC,YAAY,CAAC,kBAA4B,EAAE,yBAAmC,EAAE,qBAAqB,CAAC,CAAC;KAC7I;SAAM;QACH,OAAO,4BAAgB,CAAC,qBAAS,CAAC,CAAC,YAAY,CAAC,kBAA4B,EAAE,yBAA6C,CAAC,CAAC;KAChI;AACL,CAAC;AARD,oCAQC;AAED;;GAEG;AACH,wBAA+B,MAAwB;IACnD,4BAAgB,CAAC,iCAAe,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;AAClE,CAAC;AAFD,wCAEC","file":"index.js","sourcesContent":["import {ValidationError} from \"./validation/ValidationError\";\r\nimport {ValidatorOptions} from \"./validation/ValidatorOptions\";\r\nimport {ValidationSchema} from \"./validation-schema/ValidationSchema\";\r\nimport {MetadataStorage} from \"./metadata/MetadataStorage\";\r\nimport {Validator} from \"./validation/Validator\";\r\nimport {getFromContainer} from \"./container\";\r\n\r\n// -------------------------------------------------------------------------\r\n// Export everything api users needs\r\n// -------------------------------------------------------------------------\r\n\r\nexport * from \"./container\";\r\nexport * from \"./decorator/decorators\";\r\nexport * from \"./decorator/ValidationOptions\";\r\nexport * from \"./validation/ValidatorConstraintInterface\";\r\nexport * from \"./validation/ValidationError\";\r\nexport * from \"./validation/ValidationTypeOptions\";\r\nexport * from \"./validation/ValidatorOptions\";\r\nexport * from \"./validation/ValidationArguments\";\r\nexport * from \"./validation/ValidationTypes\";\r\nexport * from \"./validation/Validator\";\r\nexport * from \"./validation-schema/ValidationSchema\";\r\nexport * from \"./register-decorator\";\r\nexport * from \"./metadata/MetadataStorage\";\r\n\r\n// -------------------------------------------------------------------------\r\n// Shortcut methods for api users\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Validates given object.\r\n */\r\nexport function validate(object: Object, validatorOptions?: ValidatorOptions): Promise<ValidationError[]>;\r\n\r\n/**\r\n * Validates given object by a given validation schema.\r\n */\r\nexport function validate(schemaName: string, object: Object, validatorOptions?: ValidatorOptions): Promise<ValidationError[]>;\r\n\r\n/**\r\n * Validates given object by object's decorators or given validation schema.\r\n */\r\nexport function validate(schemaNameOrObject: Object|string,\r\n                         objectOrValidationOptions?: Object|ValidatorOptions,\r\n                         maybeValidatorOptions?: ValidatorOptions): Promise<ValidationError[]> {\r\n    if (typeof schemaNameOrObject === \"string\") {\r\n        return getFromContainer(Validator).validate(schemaNameOrObject as string, objectOrValidationOptions as Object, maybeValidatorOptions);\r\n    } else {\r\n        return getFromContainer(Validator).validate(schemaNameOrObject as Object, objectOrValidationOptions as ValidatorOptions);\r\n    }\r\n}\r\n\r\n/**\r\n * Validates given object and reject on error.\r\n */\r\nexport function validateOrReject(object: Object, validatorOptions?: ValidatorOptions): Promise<void>;\r\n\r\n/**\r\n * Validates given object by a given validation schema and reject on error.\r\n */\r\nexport function validateOrReject(schemaName: string, object: Object, validatorOptions?: ValidatorOptions): Promise<void>;\r\n\r\n/**\r\n * Validates given object by object's decorators or given validation schema and reject on error.\r\n */\r\nexport function validateOrReject(schemaNameOrObject: Object|string,\r\n                         objectOrValidationOptions?: Object|ValidatorOptions,\r\n                         maybeValidatorOptions?: ValidatorOptions): Promise<void> {\r\n    if (typeof schemaNameOrObject === \"string\") {\r\n        return getFromContainer(Validator).validateOrReject(schemaNameOrObject as string, objectOrValidationOptions as Object, maybeValidatorOptions);\r\n    } else {\r\n        return getFromContainer(Validator).validateOrReject(schemaNameOrObject as Object, objectOrValidationOptions as ValidatorOptions);\r\n    }\r\n}\r\n\r\n/**\r\n * Performs sync validation of the given object.\r\n * Note that this method completely ignores async validations.\r\n * If you want to properly perform validation you need to call validate method instead.\r\n */\r\nexport function validateSync(object: Object, validatorOptions?: ValidatorOptions): ValidationError[];\r\n\r\n/**\r\n * Validates given object by a given validation schema.\r\n * Note that this method completely ignores async validations.\r\n * If you want to properly perform validation you need to call validate method instead.\r\n */\r\nexport function validateSync(schemaName: string, object: Object, validatorOptions?: ValidatorOptions): ValidationError[];\r\n\r\n/**\r\n * Validates given object by object's decorators or given validation schema.\r\n * Note that this method completely ignores async validations.\r\n * If you want to properly perform validation you need to call validate method instead.\r\n */\r\nexport function validateSync(schemaNameOrObject: Object|string,\r\n                             objectOrValidationOptions?: Object|ValidatorOptions,\r\n                             maybeValidatorOptions?: ValidatorOptions): ValidationError[] {\r\n    if (typeof schemaNameOrObject === \"string\") {\r\n        return getFromContainer(Validator).validateSync(schemaNameOrObject as string, objectOrValidationOptions as Object, maybeValidatorOptions);\r\n    } else {\r\n        return getFromContainer(Validator).validateSync(schemaNameOrObject as Object, objectOrValidationOptions as ValidatorOptions);\r\n    }\r\n}\r\n\r\n/**\r\n * Registers a new validation schema.\r\n */\r\nexport function registerSchema(schema: ValidationSchema): void {\r\n    getFromContainer(MetadataStorage).addValidationSchema(schema);\r\n}\r\n"],"sourceRoot":"."}