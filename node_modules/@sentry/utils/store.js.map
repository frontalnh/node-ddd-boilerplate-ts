{"version":3,"file":"store.js","sourceRoot":"","sources":["src/store.ts"],"names":[],"mappings":";;AAAA,yBAA6D;AAC7D,6BAAqC;AACrC,2BAAkC;AAElC;;;;GAIG;AACH;IAUE;;;;;;OAMG;IACH,eAAmB,IAAY,EAAE,EAAU,EAAE,OAAU;QACrD,IAAI,CAAC,IAAI,GAAG,WAAI,CAAC,IAAI,EAAK,EAAE,UAAO,CAAC,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;IAED;;;OAGG;IACI,mBAAG,GAAV,UAAW,IAAO;QAAlB,iBASC;QARC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,YAAY,CAAC;gBACX,KAAI,CAAC,KAAK,EAAE,CAAC;YACf,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED;;;OAGG;IACI,sBAAM,GAAb,UAAc,EAAqB;QACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAC3B,CAAC;IAED;;;;;;OAMG;IACI,mBAAG,GAAV;QACE,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;YAC3B,IAAI;gBACF,IAAI,CAAC,IAAI,GAAG,eAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAE,IAAI,CAAC,KAAK,CAAC,iBAAY,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;aACvG;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;aAC1B;SACF;QAED,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,yCAAyC;IAClC,qBAAK,GAAZ;QACE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACzB,CAAC;IAED,sDAAsD;IAC9C,qBAAK,GAAb;QACE,IAAI;YACF,eAAU,CAAC,cAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC/B,kBAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SACrD;QAAC,OAAO,CAAC,EAAE;YACV,oEAAoE;YACpE,wEAAwE;YACxE,wEAAwE;SACzE;gBAAS;YACR,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;SACvB;IACH,CAAC;IACH,YAAC;AAAD,CAAC,AAnFD,IAmFC;AAnFY,sBAAK","sourcesContent":["import { existsSync, readFileSync, writeFileSync } from 'fs';\nimport { dirname, join } from 'path';\nimport { mkdirpSync } from './fs';\n\n/**\n * Note, this class is only compatible with Node.\n * Lazily serializes data to a JSON file to persist. When created, it loads data\n * from that file if it already exists.\n */\nexport class Store<T> {\n  /** Internal path for JSON file. */\n  private readonly path: string;\n  /** Value used to initialize data for the first time. */\n  private readonly initial: T;\n  /** Current state of the data. */\n  private data?: T;\n  /** State whether a flush to disk has been requested in this cycle. */\n  private flushing: boolean;\n\n  /**\n   * Creates a new store.\n   *\n   * @param path A unique filename to store this data.\n   * @param id A unique filename to store this data.\n   * @param initial An initial value to initialize data with.\n   */\n  public constructor(path: string, id: string, initial: T) {\n    this.path = join(path, `${id}.json`);\n    this.initial = initial;\n    this.flushing = false;\n  }\n\n  /**\n   * Updates data by replacing it with the given value.\n   * @param next New data to replace the previous one.\n   */\n  public set(next: T): void {\n    this.data = next;\n\n    if (!this.flushing) {\n      this.flushing = true;\n      setImmediate(() => {\n        this.flush();\n      });\n    }\n  }\n\n  /**\n   * Updates data by passing it through the given function.\n   * @param fn A function receiving the current data and returning new one.\n   */\n  public update(fn: (current: T) => T): void {\n    this.set(fn(this.get()));\n  }\n\n  /**\n   * Returns the current data.\n   *\n   * When invoked for the first time, it will try to load previously stored data\n   * from disk. If the file does not exist, the initial value provided to the\n   * constructor is used.\n   */\n  public get(): T {\n    if (this.data === undefined) {\n      try {\n        this.data = existsSync(this.path) ? (JSON.parse(readFileSync(this.path, 'utf8')) as T) : this.initial;\n      } catch (e) {\n        this.data = this.initial;\n      }\n    }\n\n    return this.data;\n  }\n\n  /** Returns store to its initial state */\n  public clear(): void {\n    this.set(this.initial);\n  }\n\n  /** Serializes the current data into the JSON file. */\n  private flush(): void {\n    try {\n      mkdirpSync(dirname(this.path));\n      writeFileSync(this.path, JSON.stringify(this.data));\n    } catch (e) {\n      // This usually fails due to anti virus scanners, issues in the file\n      // system, or problems with network drives. We cannot fix or handle this\n      // issue and must resume gracefully. Thus, we have to ignore this error.\n    } finally {\n      this.flushing = false;\n    }\n  }\n}\n"]}