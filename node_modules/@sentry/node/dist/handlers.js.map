{"version":3,"file":"handlers.js","sourceRoot":"","sources":["../src/handlers.ts"],"names":[],"mappings":"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","sourcesContent":["import { captureException, getCurrentHub } from '@sentry/core';\nimport { SentryEvent } from '@sentry/types';\nimport { forget } from '@sentry/utils/async';\nimport { logger } from '@sentry/utils/logger';\nimport { serialize } from '@sentry/utils/object';\nimport * as cookie from 'cookie';\nimport * as domain from 'domain';\nimport * as http from 'http';\nimport * as os from 'os';\nimport * as url from 'url';\nimport { NodeClient } from './client';\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\ntype TransactionTypes = 'path' | 'methodPath' | 'handler';\n\n/** JSDoc */\nfunction extractTransaction(req: { [key: string]: any }, type: boolean | TransactionTypes): string | undefined {\n  try {\n    // Express.js shape\n    const request = req as {\n      method: string;\n      route: {\n        path: string;\n        stack: [\n          {\n            name: string;\n          }\n        ];\n      };\n    };\n\n    switch (type) {\n      case 'path': {\n        return request.route.path;\n      }\n      case 'handler': {\n        return request.route.stack[0].name;\n      }\n      case 'methodPath':\n      default: {\n        const method = request.method.toUpperCase();\n        const path = request.route.path;\n        return `${method}|${path}`;\n      }\n    }\n  } catch (_oO) {\n    return undefined;\n  }\n}\n\n/** JSDoc */\nfunction extractRequestData(req: { [key: string]: any }): { [key: string]: string } {\n  // headers:\n  //   node, express: req.headers\n  //   koa: req.header\n  const headers = (req.headers || req.header || {}) as {\n    host?: string;\n    cookie?: string;\n  };\n  // method:\n  //   node, express, koa: req.method\n  const method = req.method;\n  // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node: req.headers.host\n  const host = req.hostname || req.host || headers.host || '<no host>';\n  // protocol:\n  //   node: <n/a>\n  //   express, koa: req.protocol\n  const protocol =\n    req.protocol === 'https' || req.secure || ((req.socket || {}) as { encrypted?: boolean }).encrypted\n      ? 'https'\n      : 'http';\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa: req.url\n  const originalUrl = (req.originalUrl || req.url) as string;\n  // absolute url\n  const absoluteUrl = `${protocol}://${host}${originalUrl}`;\n  // query string:\n  //   node: req.url (raw)\n  //   express, koa: req.query\n  const query = url.parse(originalUrl || '', false).query;\n  // cookies:\n  //   node, express, koa: req.headers.cookie\n  const cookies = cookie.parse(headers.cookie || '');\n  // body data:\n  //   node, express, koa: req.body\n  let data = req.body;\n  if (method === 'GET' || method === 'HEAD') {\n    if (typeof data === 'undefined') {\n      data = '<unavailable>';\n    }\n  }\n  if (data && typeof data !== 'string' && {}.toString.call(data) !== '[object String]') {\n    // Make sure the request body is a string\n    data = serialize(data);\n  }\n\n  // request interface\n  const request: {\n    [key: string]: any;\n  } = {\n    cookies,\n    data,\n    headers,\n    method,\n    query_string: query,\n    url: absoluteUrl,\n  };\n\n  return request;\n}\n\n/** Default user keys that'll be used to extract data from the request */\nconst DEFAULT_USER_KEYS = ['id', 'username', 'email'];\n\n/** JSDoc */\nfunction extractUserData(req: { [key: string]: any }, keys: boolean | string[]): { [key: string]: string } {\n  const user: { [key: string]: string } = {};\n  const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_KEYS;\n\n  attributes.forEach(key => {\n    if ({}.hasOwnProperty.call(req.user, key)) {\n      user[key] = (req.user as { [key: string]: string })[key];\n    }\n  });\n\n  // client ip:\n  //   node: req.connection.remoteAddress\n  //   express, koa: req.ip\n  const ip =\n    req.ip ||\n    (req.connection &&\n      (req.connection as {\n        remoteAddress?: string;\n      }).remoteAddress);\n\n  if (ip) {\n    user.ip_address = ip as string;\n  }\n\n  return user;\n}\n\n/**\n * Enriches passed event with request data.\n *\n *\n * @param event Will be mutated and enriched with req data\n * @param req Request object\n * @param options object containing flags to enable functionality\n */\nexport function parseRequest(\n  event: SentryEvent,\n  req: {\n    [key: string]: any;\n  },\n  options?: {\n    request?: boolean;\n    serverName?: boolean;\n    transaction?: boolean | TransactionTypes;\n    user?: boolean | string[];\n    version?: boolean;\n  },\n): SentryEvent {\n  // tslint:disable-next-line:no-parameter-reassignment\n  options = {\n    request: true,\n    serverName: true,\n    transaction: true,\n    user: true,\n    version: true,\n    ...options,\n  };\n\n  if (options.version) {\n    event.extra = {\n      ...event.extra,\n      node: global.process.version,\n    };\n  }\n\n  if (options.request) {\n    event.request = {\n      ...event.request,\n      ...extractRequestData(req),\n    };\n  }\n\n  if (options.serverName) {\n    event.server_name = global.process.env.SENTRY_NAME || os.hostname();\n  }\n\n  if (options.user && req.user) {\n    event.user = {\n      ...event.user,\n      ...extractUserData(req, options.user),\n    };\n  }\n\n  if (options.transaction) {\n    const transaction = extractTransaction(req, options.transaction);\n    if (transaction) {\n      event.transaction = transaction;\n    }\n  }\n\n  return event;\n}\n\n/** JSDoc */\nexport function requestHandler(options?: {\n  request?: boolean;\n  serverName?: boolean;\n  transaction?: boolean | TransactionTypes;\n  user?: boolean | string[];\n  version?: boolean;\n}): (req: http.IncomingMessage, res: http.ServerResponse, next: (error?: any) => void) => void {\n  return function sentryRequestMiddleware(\n    req: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: (error?: any) => void,\n  ): void {\n    const local = domain.create();\n    local.add(req);\n    local.add(res);\n    local.on('error', next);\n    local.run(() => {\n      getCurrentHub().configureScope(scope =>\n        scope.addEventProcessor(async (event: SentryEvent) => parseRequest(event, req, options)),\n      );\n      next();\n    });\n  };\n}\n\n/** JSDoc */\ninterface MiddlewareError extends Error {\n  status?: number | string;\n  statusCode?: number | string;\n  status_code?: number | string;\n  output?: {\n    statusCode?: number | string;\n  };\n}\n\n/** JSDoc */\nfunction getStatusCodeFromResponse(error: MiddlewareError): number {\n  const statusCode = error.status || error.statusCode || error.status_code || (error.output && error.output.statusCode);\n  return statusCode ? parseInt(statusCode as string, 10) : 500;\n}\n\n/** JSDoc */\nexport function errorHandler(): (\n  error: MiddlewareError,\n  req: http.IncomingMessage,\n  res: http.ServerResponse,\n  next: (error: MiddlewareError) => void,\n) => void {\n  return function sentryErrorMiddleware(\n    error: MiddlewareError,\n    _req: http.IncomingMessage,\n    _res: http.ServerResponse,\n    next: (error: MiddlewareError) => void,\n  ): void {\n    const status = getStatusCodeFromResponse(error);\n    if (status < 500) {\n      next(error);\n      return;\n    }\n    captureException(error);\n    next(error);\n  };\n}\n\n/** JSDoc */\nexport function defaultOnFatalError(error: Error): void {\n  console.error(error && error.stack ? error.stack : error);\n  const options = (getCurrentHub().getClient() as NodeClient).getOptions();\n  const timeout =\n    (options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout) ||\n    DEFAULT_SHUTDOWN_TIMEOUT;\n  forget(\n    (getCurrentHub().getClient() as NodeClient).close(timeout).then((result: boolean) => {\n      if (!result) {\n        logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n    }),\n  );\n}\n"]}