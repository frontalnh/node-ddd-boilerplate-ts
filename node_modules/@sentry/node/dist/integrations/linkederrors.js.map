{"version":3,"file":"linkederrors.js","sourceRoot":"","sources":["../../src/integrations/linkederrors.ts"],"names":[],"mappings":";;;AAAA,qCAAsE;AAEtE,sCAAmD;AAEnD,IAAM,WAAW,GAAG,OAAO,CAAC;AAC5B,IAAM,aAAa,GAAG,CAAC,CAAC;AASxB,iCAAiC;AACjC;IAoBE;;OAEG;IACH,sBAAmB,OAA8C;QAA9C,wBAAA,EAAA,YAA8C;QAtBjE;;WAEG;QACa,SAAI,GAAW,YAAY,CAAC,EAAE,CAAC;QAoB7C,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,IAAI,WAAW,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,aAAa,CAAC;IAC9C,CAAC;IAED;;OAEG;IACI,gCAAS,GAAhB;QAAA,iBAQC;QAPC,8BAAuB,CAAC,UAAO,KAAkB,EAAE,IAAsB;;;gBACjE,IAAI,GAAG,oBAAa,EAAE,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;gBAC1D,IAAI,IAAI,EAAE;oBACR,sBAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC;iBAClC;gBACD,sBAAO,KAAK,EAAC;;aACd,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACU,8BAAO,GAApB,UAAqB,KAAkB,EAAE,IAAsB;;;;;;wBAC7D,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,iBAAiB,YAAY,KAAK,CAAC,EAAE;4BACtG,sBAAO,KAAK,EAAC;yBACd;wBACoB,qBAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,GAAG,CAAC,EAAA;;wBAAzE,YAAY,GAAG,SAA0D;wBAC/E,KAAK,CAAC,SAAS,CAAC,MAAM,oBAAO,YAAY,EAAK,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;wBACtE,sBAAO,KAAK,EAAC;;;;KACd;IAED;;OAEG;IACU,oCAAa,GAA1B,UACE,KAAoB,EACpB,GAAW,EACX,KAA6B;QAA7B,sBAAA,EAAA,UAA6B;;;;;;wBAE7B,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;4BACpE,sBAAO,KAAK,EAAC;yBACd;wBACiB,qBAAM,+BAAqB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAA;;wBAAnD,SAAS,GAAG,SAAuC;wBACzD,sBAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,GAAG,oBAAG,SAAS,GAAK,KAAK,EAAE,EAAC;;;;KACnE;IA7DD;;OAEG;IACW,eAAE,GAAW,cAAc,CAAC;IA2D5C,mBAAC;CAAA,AAnED,IAmEC;AAnEY,oCAAY","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Integration, SentryEvent, SentryEventHint, SentryException } from '@sentry/types';\nimport { getExceptionFromError } from '../parsers';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/**\n * Just an Error object with arbitrary attributes attached to it.\n */\ninterface ExtendedError extends Error {\n  [key: string]: any;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this.key = options.key || DEFAULT_KEY;\n    this.limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (event: SentryEvent, hint?: SentryEventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        return self.handler(event, hint);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async handler(event: SentryEvent, hint?: SentryEventHint): Promise<SentryEvent | null> {\n    if (!event.exception || !event.exception.values || !hint || !(hint.originalException instanceof Error)) {\n      return event;\n    }\n    const linkedErrors = await this.walkErrorTree(hint.originalException, this.key);\n    event.exception.values = [...linkedErrors, ...event.exception.values];\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async walkErrorTree(\n    error: ExtendedError,\n    key: string,\n    stack: SentryException[] = [],\n  ): Promise<SentryException[]> {\n    if (!(error[key] instanceof Error) || stack.length + 1 >= this.limit) {\n      return stack;\n    }\n    const exception = await getExceptionFromError(error[key]);\n    return this.walkErrorTree(error[key], key, [exception, ...stack]);\n  }\n}\n"]}