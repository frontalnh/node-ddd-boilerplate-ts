{"version":3,"sources":["../../src/validation/ValidatorOptions.ts"],"names":[],"mappings":"","file":"ValidatorOptions.js","sourcesContent":["/**\r\n * Options passed to validator during validation.\r\n */\r\nexport interface ValidatorOptions {\r\n\r\n    /**\r\n     * If set to true than validator will skip validation of all properties that are missing in the validating object.\r\n     */\r\n    skipMissingProperties?: boolean;\r\n\r\n    /**\r\n     * If set to true validator will strip validated object of any properties that do not have any decorators.\r\n     *\r\n     * Tip: if no other decorator is suitable for your property use @Allow decorator.\r\n     */\r\n    whitelist?: boolean;\r\n\r\n    /**\r\n     * If set to true, instead of stripping non-whitelisted properties validator will throw an error\r\n     */\r\n    forbidNonWhitelisted?: boolean;\r\n\r\n    /**\r\n     * Groups to be used during validation of the object.\r\n     */\r\n    groups?: string[];\r\n\r\n    /**\r\n     * If set to true, the validation will not use default messages.\r\n     * Error message always will be undefined if its not explicitly set.\r\n     */\r\n    dismissDefaultMessages?: boolean;\r\n\r\n    /**\r\n     * ValidationError special options.\r\n     */\r\n    validationError?: {\r\n\r\n        /**\r\n         * Indicates if target should be exposed in ValidationError.\r\n         */\r\n        target?: boolean;\r\n\r\n        /**\r\n         * Indicates if validated value should be exposed in ValidationError.\r\n         */\r\n        value?: boolean;\r\n\r\n    };\r\n\r\n    /**\r\n     * Settings true will cause fail validation of unknown objects.\r\n     */\r\n    forbidUnknownValues?: boolean;\r\n\r\n}"],"sourceRoot":".."}