{"version":3,"file":"logger.js","sourceRoot":"","sources":["src/logger.ts"],"names":[],"mappings":";;AAAA,+BAAyD;AAEzD,+DAA+D;AAC/D,IAAM,MAAM,GAAG,sBAAe,EAAY,CAAC;AAE3C,YAAY;AACZ;IAIE,YAAY;IACZ;QACE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACvB,CAAC;IAED,YAAY;IACL,wBAAO,GAAd;QACE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACvB,CAAC;IAED,YAAY;IACL,uBAAM,GAAb;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,YAAY;IACL,oBAAG,GAAV;QAAW,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACvB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO;SACR;QACD,qBAAc,CAAC;YACb,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,0BAAwB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC,CAAC,CAAC,iCAAiC;QACjG,CAAC,CAAC,CAAC;IACL,CAAC;IAED,YAAY;IACL,qBAAI,GAAX;QAAY,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACxB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO;SACR;QACD,qBAAc,CAAC;YACb,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,2BAAyB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC,CAAC,CAAC,iCAAiC;QACnG,CAAC,CAAC,CAAC;IACL,CAAC;IAED,YAAY;IACL,sBAAK,GAAZ;QAAa,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACzB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO;SACR;QACD,qBAAc,CAAC;YACb,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,4BAA0B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC,CAAC,CAAC,iCAAiC;QACrG,CAAC,CAAC,CAAC;IACL,CAAC;IACH,aAAC;AAAD,CAAC,AAhDD,IAgDC;AAED,IAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAEnB,wBAAM","sourcesContent":["import { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject() as Window;\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this.enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this.enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this.enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this.enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`Sentry Logger [Log]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this.enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`Sentry Logger [Warn]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this.enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`Sentry Logger [Error]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n}\n\nconst logger = new Logger();\n\nexport { logger };\n"]}