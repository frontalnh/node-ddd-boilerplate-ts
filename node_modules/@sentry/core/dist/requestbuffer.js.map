{"version":3,"file":"requestbuffer.js","sourceRoot":"","sources":["../src/requestbuffer.ts"],"names":[],"mappings":";;;AAAA,0CAA0C;AAC1C;IAAA;QACE,sCAAsC;QACrB,WAAM,GAAsB,EAAE,CAAC;IAyDlD,CAAC;IAvDC;;;;;OAKG;IACU,2BAAG,GAAhB,UAAiB,IAAgB;;;;gBAC/B,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;oBACpC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACxB;gBACD,IAAI,CAAC,IAAI,CAAC;oBAAY,sBAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAA;yBAAA,CAAC,CAAC,KAAK,CAAC;oBAAY,sBAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAA;yBAAA,CAAC,CAAC;gBAC9E,sBAAO,IAAI,EAAC;;;KACb;IAED;;;;;OAKG;IACU,8BAAM,GAAnB,UAAoB,IAAgB;;;;gBAC5B,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxE,sBAAO,WAAW,EAAC;;;KACpB;IAED;;OAEG;IACI,8BAAM,GAAb;QACE,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC5B,CAAC;IAED;;;;;OAKG;IACU,6BAAK,GAAlB,UAAmB,OAAgB;;;;gBACjC,sBAAO,IAAI,OAAO,CAAU,UAAA,OAAO;wBACjC,IAAM,kBAAkB,GAAG,UAAU,CAAC;4BACpC,IAAI,OAAO,IAAI,OAAO,GAAG,CAAC,EAAE;gCAC1B,OAAO,CAAC,KAAK,CAAC,CAAC;6BAChB;wBACH,CAAC,EAAE,OAAO,CAAC,CAAC;wBACZ,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,MAAM,CAAC;6BACrB,IAAI,CAAC;4BACJ,YAAY,CAAC,kBAAkB,CAAC,CAAC;4BACjC,OAAO,CAAC,IAAI,CAAC,CAAC;wBAChB,CAAC,CAAC;6BACD,KAAK,CAAC;4BACL,OAAO,CAAC,IAAI,CAAC,CAAC;wBAChB,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,EAAC;;;KACJ;IACH,oBAAC;AAAD,CAAC,AA3DD,IA2DC;AA3DY,sCAAa","sourcesContent":["/** A simple queue that holds promises. */\nexport class RequestBuffer<T> {\n  /** Internal set of queued Promises */\n  private readonly buffer: Array<Promise<T>> = [];\n\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any Promise<T>\n   * @returns The original promise.\n   */\n  public async add(task: Promise<T>): Promise<T> {\n    if (this.buffer.indexOf(task) === -1) {\n      this.buffer.push(task);\n    }\n    task.then(async () => this.remove(task)).catch(async () => this.remove(task));\n    return task;\n  }\n\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any Promise<T>\n   * @returns Removed promise.\n   */\n  public async remove(task: Promise<T>): Promise<T> {\n    const removedTask = this.buffer.splice(this.buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this.buffer.length;\n  }\n\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  public async drain(timeout?: number): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      Promise.all(this.buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .catch(() => {\n          resolve(true);\n        });\n    });\n  }\n}\n"]}