{"version":3,"file":"parsers.js","sourceRoot":"","sources":["../src/parsers.ts"],"names":[],"mappings":"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","sourcesContent":["import { SentryEvent, SentryException, StackFrame } from '@sentry/types';\nimport { readFileAsync } from '@sentry/utils/fs';\nimport { basename, dirname } from '@sentry/utils/path';\nimport { snipLine } from '@sentry/utils/string';\nimport * as stacktrace from 'stack-trace';\n\nconst LINES_OF_CONTEXT: number = 7;\n\n/**\n * Just an Error object with arbitrary attributes attached to it.\n */\ninterface ExtendedError extends Error {\n  [key: string]: any;\n}\n\n/** JSDoc */\nfunction getFunction(frame: stacktrace.StackFrame): string {\n  try {\n    return frame.getFunctionName() || `${frame.getTypeName()}.${frame.getMethodName() || '<anonymous>'}`;\n  } catch (e) {\n    // This seems to happen sometimes when using 'use strict',\n    // stemming from `getTypeName`.\n    // [TypeError: Cannot read property 'constructor' of undefined]\n    return '<anonymous>';\n  }\n}\n\nconst mainModule: string = `${(require.main && require.main.filename && dirname(require.main.filename)) ||\n  global.process.cwd()}/`;\n\n/** JSDoc */\nfunction getModule(filename: string, base?: string): string {\n  if (!base) {\n    base = mainModule; // tslint:disable-line:no-parameter-reassignment\n  }\n\n  // It's specifically a module\n  const file = basename(filename, '.js');\n  filename = dirname(filename); // tslint:disable-line:no-parameter-reassignment\n  let n = filename.lastIndexOf('/node_modules/');\n  if (n > -1) {\n    // /node_modules/ is 14 chars\n    return `${filename.substr(n + 14).replace(/\\//g, '.')}:${file}`;\n  }\n  // Let's see if it's a part of the main module\n  // To be a part of main module, it has to share the same base\n  n = `${filename}/`.lastIndexOf(base, 0);\n  if (n === 0) {\n    let moduleName = filename.substr(base.length).replace(/\\//g, '.');\n    if (moduleName) {\n      moduleName += ':';\n    }\n    moduleName += file;\n    return moduleName;\n  }\n  return file;\n}\n\n/** JSDoc */\nasync function readSourceFiles(\n  filenames: string[],\n): Promise<{\n  [key: string]: string;\n}> {\n  // we're relying on filenames being de-duped already\n  if (filenames.length === 0) {\n    return {};\n  }\n\n  const sourceFiles: {\n    [key: string]: string;\n  } = {};\n\n  await Promise.all(\n    filenames.map(async filename => {\n      let content;\n      try {\n        content = await readFileAsync(filename);\n      } catch (_) {\n        // unsure what to add here as the file is unreadable\n        content = null;\n      }\n      if (typeof content === 'string') {\n        sourceFiles[filename] = content;\n      }\n    }),\n  );\n\n  return sourceFiles;\n}\n\n/** JSDoc */\nexport async function extractStackFromError(error: Error): Promise<stacktrace.StackFrame[]> {\n  const stack = stacktrace.parse(error);\n  if (!stack) {\n    return [];\n  }\n  return stack;\n}\n\n/** JSDoc */\nexport async function parseStack(stack: stacktrace.StackFrame[]): Promise<StackFrame[]> {\n  const filesToRead: string[] = [];\n  const frames: StackFrame[] = stack.map(frame => {\n    const parsedFrame: StackFrame = {\n      colno: frame.getColumnNumber(),\n      filename: frame.getFileName() || '',\n      function: getFunction(frame),\n      lineno: frame.getLineNumber(),\n    };\n\n    const isInternal =\n      frame.isNative() ||\n      (parsedFrame.filename &&\n        !parsedFrame.filename.startsWith('/') &&\n        !parsedFrame.filename.startsWith('.') &&\n        parsedFrame.filename.indexOf(':\\\\') !== 1);\n\n    // in_app is all that's not an internal Node function or a module within node_modules\n    // note that isNative appears to return true even for node core libraries\n    // see https://github.com/getsentry/raven-node/issues/176\n    parsedFrame.in_app =\n      !isInternal && parsedFrame.filename !== undefined && !parsedFrame.filename.includes('node_modules/');\n\n    // Extract a module name based on the filename\n    if (parsedFrame.filename) {\n      parsedFrame.module = getModule(parsedFrame.filename);\n\n      if (!isInternal) {\n        filesToRead.push(parsedFrame.filename);\n      }\n    }\n\n    return parsedFrame;\n  });\n\n  try {\n    return await addPrePostContext(filesToRead, frames);\n  } catch (_) {\n    // This happens in electron for example where we are not able to read files from asar.\n    // So it's fine, we recover be just returning all frames without pre/post context.\n    return frames;\n  }\n}\n\n/**\n * This function tries to read the source files + adding pre and post context (source code)\n * to a frame.\n * @param filesToRead string[] of filepaths\n * @param frames StackFrame[] containg all frames\n */\nasync function addPrePostContext(filesToRead: string[], frames: StackFrame[]): Promise<StackFrame[]> {\n  const sourceFiles = await readSourceFiles(filesToRead);\n  return frames.map(frame => {\n    if (frame.filename && sourceFiles[frame.filename]) {\n      try {\n        const lines = sourceFiles[frame.filename].split('\\n');\n\n        frame.pre_context = lines\n          .slice(Math.max(0, (frame.lineno || 0) - (LINES_OF_CONTEXT + 1)), (frame.lineno || 0) - 1)\n          .map((line: string) => snipLine(line, 0));\n\n        frame.context_line = snipLine(lines[(frame.lineno || 0) - 1], frame.colno || 0);\n\n        frame.post_context = lines\n          .slice(frame.lineno || 0, (frame.lineno || 0) + LINES_OF_CONTEXT)\n          .map((line: string) => snipLine(line, 0));\n      } catch (e) {\n        // anomaly, being defensive in case\n        // unlikely to ever happen in practice but can definitely happen in theory\n      }\n    }\n    return frame;\n  });\n}\n\n/** JSDoc */\nexport async function getExceptionFromError(error: Error): Promise<SentryException> {\n  const name = error.name || error.constructor.name;\n  const stack = await extractStackFromError(error);\n  const frames = await parseStack(stack);\n\n  return {\n    stacktrace: {\n      frames: prepareFramesForEvent(frames),\n    },\n    type: name,\n    value: error.message,\n  };\n}\n\n/** JSDoc */\nexport async function parseError(error: ExtendedError): Promise<SentryEvent> {\n  const name = error.name || error.constructor.name;\n  const exception = await getExceptionFromError(error);\n  const event: SentryEvent = {\n    exception: {\n      values: [exception],\n    },\n    message: `${name}: ${error.message || '<no message>'}`,\n  };\n  const errorKeys = Object.keys(error).filter(key => !(key in ['name', 'message', 'stack', 'domain']));\n\n  if (errorKeys.length) {\n    const extraErrorInfo: { [key: string]: any } = {};\n    for (const key of errorKeys) {\n      extraErrorInfo[key] = error[key];\n    }\n    event.extra = {\n      [name]: extraErrorInfo,\n    };\n  }\n\n  return event;\n}\n\n/** JSDoc */\nexport function prepareFramesForEvent(stack: StackFrame[]): StackFrame[] {\n  if (!stack || !stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n  const firstFrameFunction = localStack[0].function || '';\n\n  if (firstFrameFunction.includes('captureMessage') || firstFrameFunction.includes('captureException')) {\n    localStack = localStack.slice(1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack.reverse();\n}\n"]}