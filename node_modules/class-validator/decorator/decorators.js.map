{"version":3,"sources":["../../src/decorator/decorators.ts"],"names":[],"mappings":"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","file":"decorators.js","sourcesContent":["import {ValidationTypes} from \"../validation/ValidationTypes\";\r\nimport {IsEmailOptions, IsFQDNOptions, IsURLOptions, IsCurrencyOptions, IsNumberOptions} from \"../validation/ValidationTypeOptions\";\r\nimport {ValidationOptions} from \"./ValidationOptions\";\r\nimport {ValidationMetadata} from \"../metadata/ValidationMetadata\";\r\nimport {ValidationMetadataArgs} from \"../metadata/ValidationMetadataArgs\";\r\nimport {ConstraintMetadata} from \"../metadata/ConstraintMetadata\";\r\nimport {getFromContainer} from \"../container\";\r\nimport {MetadataStorage} from \"../metadata/MetadataStorage\";\r\n\r\n// -------------------------------------------------------------------------\r\n// System\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Registers custom validator class.\r\n */\r\nexport function ValidatorConstraint(options?: { name?: string, async?: boolean }) {\r\n    return function(target: Function) {\r\n        const isAsync = options && options.async ? true : false;\r\n        let name = options && options.name ? options.name : \"\";\r\n        if (!name) {\r\n            name = (target as any).name;\r\n            if (!name) // generate name if it was not given\r\n                name = name.replace(/\\.?([A-Z]+)/g, (x, y) => \"_\" + y.toLowerCase()).replace(/^_/, \"\");\r\n        }\r\n        const metadata = new ConstraintMetadata(target, name, isAsync);\r\n        getFromContainer(MetadataStorage).addConstraintMetadata(metadata);\r\n    };\r\n}\r\n\r\n/**\r\n * Performs validation based on the given custom validation class.\r\n * Validation class must be decorated with ValidatorConstraint decorator.\r\n */\r\nexport function Validate(constraintClass: Function, validationOptions?: ValidationOptions): Function;\r\nexport function Validate(constraintClass: Function, constraints?: any[], validationOptions?: ValidationOptions): Function;\r\nexport function Validate(constraintClass: Function, constraintsOrValidationOptions?: any[]|ValidationOptions, maybeValidationOptions?: ValidationOptions): Function {\r\n    return function(object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.CUSTOM_VALIDATION,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraintCls: constraintClass,\r\n            constraints: constraintsOrValidationOptions instanceof Array ? constraintsOrValidationOptions as any[] : undefined,\r\n            validationOptions: !(constraintsOrValidationOptions instanceof Array) ? constraintsOrValidationOptions as ValidationOptions : maybeValidationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Objects / object arrays marked with this decorator will also be validated.\r\n */\r\nexport function ValidateNested(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.NESTED_VALIDATION,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * If object has both allowed and not allowed properties a validation error will be thrown.\r\n */\r\nexport function Allow(validationOptions?: ValidationOptions) {\r\n  return function (object: Object, propertyName: string) {\r\n    const args: ValidationMetadataArgs = {\r\n      type: ValidationTypes.WHITELIST,\r\n      target: object.constructor,\r\n      propertyName: propertyName,\r\n      validationOptions: validationOptions\r\n    };\r\n    getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * Objects / object arrays marked with this decorator will also be validated.\r\n */\r\nexport function ValidateIf(condition: (object: any, value: any) => boolean, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.CONDITIONAL_VALIDATION,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [condition],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n// -------------------------------------------------------------------------\r\n// Common checkers\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Checks if given value is defined (!== undefined, !== null).\r\n */\r\nexport function IsDefined(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_DEFINED,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the value match (\"===\") the comparison.\r\n */\r\nexport function Equals(comparison: any, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.EQUALS,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [comparison],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the value does not match (\"!==\") the comparison.\r\n */\r\nexport function NotEquals(comparison: any, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.NOT_EQUALS,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [comparison],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if given value is empty (=== '', === null, === undefined).\r\n */\r\nexport function IsEmpty(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_EMPTY,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if given value is not empty (!== '', !== null, !== undefined).\r\n */\r\nexport function IsNotEmpty(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_NOT_EMPTY,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if value is in a array of allowed values.\r\n */\r\nexport function IsIn(values: any[], validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_IN,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [values],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if value is not in a array of disallowed values.\r\n */\r\nexport function IsNotIn(values: any[], validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_NOT_IN,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [values],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if value is missing and if so, ignores all validators.\r\n */\r\nexport function IsOptional(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.CONDITIONAL_VALIDATION,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [(object: any, value: any) => {\r\n                return object[propertyName] !== null && object[propertyName] !== undefined;\r\n            }],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n// -------------------------------------------------------------------------\r\n// Type checkers\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Checks if a value is a boolean.\r\n */\r\nexport function IsBoolean(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_BOOLEAN,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if a value is a date.\r\n */\r\nexport function IsDate(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_DATE,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if a value is a number.\r\n */\r\nexport function IsNumber(options: IsNumberOptions = {}, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_NUMBER,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [options],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the value is an integer number.\r\n */\r\nexport function IsInt(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_INT,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if a value is a string.\r\n */\r\nexport function IsString(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_STRING,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\nexport function IsDateString(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_DATE_STRING,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if a value is an array.\r\n */\r\nexport function IsArray(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_ARRAY,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if a value is a number enum.\r\n */\r\nexport function IsEnum(entity: Object, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_ENUM,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [entity],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n\r\n// -------------------------------------------------------------------------\r\n// Number checkers\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Checks if the value is a number that's divisible by another.\r\n */\r\nexport function IsDivisibleBy(num: number, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_DIVISIBLE_BY,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [num],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the value is a positive number.\r\n */\r\nexport function IsPositive(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_POSITIVE,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the value is a negative number.\r\n */\r\nexport function IsNegative(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_NEGATIVE,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n/**\r\n * Checks if the given number is greater than or equal to given number.\r\n */\r\nexport function Min(min: number, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.MIN,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [min],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the given number is less than or equal to given number.\r\n */\r\nexport function Max(max: number, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.MAX,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [max],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n// -------------------------------------------------------------------------\r\n// Date checkers\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Checks if the value is a date that's after the specified date.\r\n */\r\nexport function MinDate(date: Date, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.MIN_DATE,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [date],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the value is a date that's before the specified date.\r\n */\r\nexport function MaxDate(date: Date, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.MAX_DATE,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [date],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n// -------------------------------------------------------------------------\r\n// String-as-types checkers\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Checks if a string is a boolean.\r\n */\r\nexport function IsBooleanString(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_BOOLEAN_STRING,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is a number.\r\n */\r\nexport function IsNumberString(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_NUMBER_STRING,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n// -------------------------------------------------------------------------\r\n// String checkers\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Checks if the string contains the seed.\r\n */\r\nexport function Contains(seed: string, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.CONTAINS,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [seed],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string does not contain the seed.\r\n */\r\nexport function NotContains(seed: string, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.NOT_CONTAINS,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [seed],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string contains only letters (a-zA-Z).\r\n */\r\nexport function IsAlpha(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_ALPHA,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string contains only letters and numbers.\r\n */\r\nexport function IsAlphanumeric(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_ALPHANUMERIC,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string contains ASCII chars only.\r\n */\r\nexport function IsAscii(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_ASCII,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if a string is base64 encoded.\r\n */\r\nexport function IsBase64(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_BASE64,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string's length (in bytes) falls in a range.\r\n */\r\nexport function IsByteLength(min: number, max?: number, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_BYTE_LENGTH,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [min, max],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is a credit card.\r\n */\r\nexport function IsCreditCard(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_CREDIT_CARD,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is a valid currency amount.\r\n */\r\nexport function IsCurrency(options?: IsCurrencyOptions, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_CURRENCY,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [options],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is an email.\r\n */\r\nexport function IsEmail(options?: IsEmailOptions, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_EMAIL,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [options],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is a fully qualified domain name (e.g. domain.com).\r\n */\r\nexport function IsFQDN(options?: IsFQDNOptions, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_FQDN,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [options],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string contains any full-width chars.\r\n */\r\nexport function IsFullWidth(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_FULL_WIDTH,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string contains any half-width chars.\r\n */\r\nexport function IsHalfWidth(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_HALF_WIDTH,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string contains a mixture of full and half-width chars.\r\n */\r\nexport function IsVariableWidth(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_VARIABLE_WIDTH,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is a hexadecimal color.\r\n */\r\nexport function IsHexColor(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_HEX_COLOR,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is a hexadecimal number.\r\n */\r\nexport function IsHexadecimal(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_HEXADECIMAL,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is an IP (version 4 or 6).\r\n */\r\nexport function IsIP(version?: \"4\"|\"6\", validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_IP,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [version],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is an ISBN (version 10 or 13).\r\n */\r\nexport function IsISBN(version?: \"10\"|\"13\", validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_ISBN,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [version],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is an ISIN (stock/security identifier).\r\n */\r\nexport function IsISIN(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_ISIN,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is a valid ISO 8601 date.\r\n */\r\nexport function IsISO8601(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_ISO8601,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is valid JSON (note: uses JSON.parse).\r\n */\r\nexport function IsJSON(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_JSON,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is lowercase.\r\n */\r\nexport function IsLowercase(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_LOWERCASE,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is a mobile phone number (locale is one of ['zh-CN', 'zh-TW', 'en-ZA', 'en-AU', 'en-HK',\r\n * 'pt-PT', 'fr-FR', 'el-GR', 'en-GB', 'en-US', 'en-ZM', 'ru-RU', 'nb-NO', 'nn-NO', 'vi-VN', 'en-NZ']).\r\n */\r\nexport function IsMobilePhone(locale: string, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_MOBILE_PHONE,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [locale],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is a valid phone number.\r\n * @param {string} region 2 characters uppercase country code (e.g. DE, US, CH).\r\n * If users must enter the intl. prefix (e.g. +41), then you may pass \"ZZ\" or null as region.\r\n * See [google-libphonenumber, metadata.js:countryCodeToRegionCodeMap on github]{@link https://github.com/ruimarinho/google-libphonenumber/blob/1e46138878cff479aafe2ce62175c6c49cb58720/src/metadata.js#L33}\r\n */\r\nexport function IsPhoneNumber(region: string, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_PHONE_NUMBER,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [region],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId.\r\n */\r\nexport function IsMongoId(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_MONGO_ID,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string contains one or more multibyte chars.\r\n */\r\nexport function IsMultibyte(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_MULTIBYTE,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string contains any surrogate pairs chars.\r\n */\r\nexport function IsSurrogatePair(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_SURROGATE_PAIR,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is an url.\r\n */\r\nexport function IsUrl(options?: IsURLOptions, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_URL,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [options],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is a UUID (version 3, 4 or 5).\r\n */\r\nexport function IsUUID(version?: \"3\"|\"4\"|\"5\", validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_UUID,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [version],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string is uppercase.\r\n */\r\nexport function IsUppercase(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_UPPERCASE,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\r\n */\r\nexport function Length(min: number, max?: number, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.LENGTH,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [min, max],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string's length is not less than given number. Note: this function takes into account surrogate pairs.\r\n */\r\nexport function MinLength(min: number, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.MIN_LENGTH,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [min],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\r\n */\r\nexport function MaxLength(max: number, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.MAX_LENGTH,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [max],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if string matches the pattern. Either matches('foo', /foo/i) or matches('foo', 'foo', 'i').\r\n */\r\nexport function Matches(pattern: RegExp, validationOptions?: ValidationOptions): Function;\r\nexport function Matches(pattern: RegExp, modifiers?: string, validationOptions?: ValidationOptions): Function;\r\nexport function Matches(pattern: RegExp, modifiersOrAnnotationOptions?: string|ValidationOptions, validationOptions?: ValidationOptions): Function {\r\n    let modifiers: string;\r\n    if (modifiersOrAnnotationOptions && modifiersOrAnnotationOptions instanceof Object && !validationOptions) {\r\n        validationOptions = modifiersOrAnnotationOptions as ValidationOptions;\r\n    } else {\r\n        modifiers = modifiersOrAnnotationOptions as string;\r\n    }\r\n\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.MATCHES,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [pattern, modifiers],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if the string correctly represents a time in the format HH:MM\r\n */\r\nexport function IsMilitaryTime(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_MILITARY_TIME,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n// -------------------------------------------------------------------------\r\n// Array checkers\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Checks if array contains all values from the given array of values.\r\n */\r\nexport function ArrayContains(values: any[], validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.ARRAY_CONTAINS,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [values],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if array does not contain any of the given values.\r\n */\r\nexport function ArrayNotContains(values: any[], validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.ARRAY_NOT_CONTAINS,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [values],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if given array is not empty.\r\n */\r\nexport function ArrayNotEmpty(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.ARRAY_NOT_EMPTY,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if array's length is as minimal this number.\r\n */\r\nexport function ArrayMinSize(min: number, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.ARRAY_MIN_SIZE,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [min],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if array's length is as maximal this number.\r\n */\r\nexport function ArrayMaxSize(max: number, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.ARRAY_MAX_SIZE,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [max],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if all array's values are unique. Comparison for objects is reference-based.\r\n */\r\nexport function ArrayUnique(validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.ARRAY_UNIQUE,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n\r\n/**\r\n * Checks if all array's values are unique. Comparison for objects is reference-based.\r\n */\r\nexport function IsInstance(targetType: new (...args: any[]) => any, validationOptions?: ValidationOptions) {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: ValidationMetadataArgs = {\r\n            type: ValidationTypes.IS_INSTANCE,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            constraints: [targetType],\r\n            validationOptions: validationOptions\r\n        };\r\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\r\n    };\r\n}\r\n"],"sourceRoot":".."}